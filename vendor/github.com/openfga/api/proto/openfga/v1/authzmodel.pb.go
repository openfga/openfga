// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: openfga/v1/authzmodel.proto

package openfgav1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConditionParamTypeRef_TypeName int32

const (
	ConditionParamTypeRef_TYPE_NAME_UNSPECIFIED ConditionParamTypeRef_TypeName = 0
	ConditionParamTypeRef_TYPE_NAME_ANY         ConditionParamTypeRef_TypeName = 1
	ConditionParamTypeRef_TYPE_NAME_BOOL        ConditionParamTypeRef_TypeName = 2
	ConditionParamTypeRef_TYPE_NAME_STRING      ConditionParamTypeRef_TypeName = 3
	ConditionParamTypeRef_TYPE_NAME_INT         ConditionParamTypeRef_TypeName = 4
	ConditionParamTypeRef_TYPE_NAME_UINT        ConditionParamTypeRef_TypeName = 5
	ConditionParamTypeRef_TYPE_NAME_DOUBLE      ConditionParamTypeRef_TypeName = 6
	ConditionParamTypeRef_TYPE_NAME_DURATION    ConditionParamTypeRef_TypeName = 7
	ConditionParamTypeRef_TYPE_NAME_TIMESTAMP   ConditionParamTypeRef_TypeName = 8
	ConditionParamTypeRef_TYPE_NAME_MAP         ConditionParamTypeRef_TypeName = 9
	ConditionParamTypeRef_TYPE_NAME_LIST        ConditionParamTypeRef_TypeName = 10
	ConditionParamTypeRef_TYPE_NAME_IPADDRESS   ConditionParamTypeRef_TypeName = 11
)

// Enum value maps for ConditionParamTypeRef_TypeName.
var (
	ConditionParamTypeRef_TypeName_name = map[int32]string{
		0:  "TYPE_NAME_UNSPECIFIED",
		1:  "TYPE_NAME_ANY",
		2:  "TYPE_NAME_BOOL",
		3:  "TYPE_NAME_STRING",
		4:  "TYPE_NAME_INT",
		5:  "TYPE_NAME_UINT",
		6:  "TYPE_NAME_DOUBLE",
		7:  "TYPE_NAME_DURATION",
		8:  "TYPE_NAME_TIMESTAMP",
		9:  "TYPE_NAME_MAP",
		10: "TYPE_NAME_LIST",
		11: "TYPE_NAME_IPADDRESS",
	}
	ConditionParamTypeRef_TypeName_value = map[string]int32{
		"TYPE_NAME_UNSPECIFIED": 0,
		"TYPE_NAME_ANY":         1,
		"TYPE_NAME_BOOL":        2,
		"TYPE_NAME_STRING":      3,
		"TYPE_NAME_INT":         4,
		"TYPE_NAME_UINT":        5,
		"TYPE_NAME_DOUBLE":      6,
		"TYPE_NAME_DURATION":    7,
		"TYPE_NAME_TIMESTAMP":   8,
		"TYPE_NAME_MAP":         9,
		"TYPE_NAME_LIST":        10,
		"TYPE_NAME_IPADDRESS":   11,
	}
)

func (x ConditionParamTypeRef_TypeName) Enum() *ConditionParamTypeRef_TypeName {
	p := new(ConditionParamTypeRef_TypeName)
	*p = x
	return p
}

func (x ConditionParamTypeRef_TypeName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionParamTypeRef_TypeName) Descriptor() protoreflect.EnumDescriptor {
	return file_openfga_v1_authzmodel_proto_enumTypes[0].Descriptor()
}

func (ConditionParamTypeRef_TypeName) Type() protoreflect.EnumType {
	return &file_openfga_v1_authzmodel_proto_enumTypes[0]
}

func (x ConditionParamTypeRef_TypeName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionParamTypeRef_TypeName.Descriptor instead.
func (ConditionParamTypeRef_TypeName) EnumDescriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{18, 0}
}

type AuthorizationModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SchemaVersion   string                `protobuf:"bytes,2,opt,name=schema_version,proto3" json:"schema_version,omitempty"`
	TypeDefinitions []*TypeDefinition     `protobuf:"bytes,3,rep,name=type_definitions,proto3" json:"type_definitions,omitempty"`
	Conditions      map[string]*Condition `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AuthorizationModel) Reset() {
	*x = AuthorizationModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationModel) ProtoMessage() {}

func (x *AuthorizationModel) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationModel.ProtoReflect.Descriptor instead.
func (*AuthorizationModel) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{0}
}

func (x *AuthorizationModel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuthorizationModel) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *AuthorizationModel) GetTypeDefinitions() []*TypeDefinition {
	if x != nil {
		return x.TypeDefinitions
	}
	return nil
}

func (x *AuthorizationModel) GetConditions() map[string]*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type TypeDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Relations map[string]*Userset `protobuf:"bytes,2,rep,name=relations,proto3" json:"relations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map whose keys are the name of the relation and whose value is the Metadata for that relation.
	// It also holds information around the module name and source file if this model was constructed
	// from a modular model.
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TypeDefinition) Reset() {
	*x = TypeDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDefinition) ProtoMessage() {}

func (x *TypeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDefinition.ProtoReflect.Descriptor instead.
func (*TypeDefinition) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{1}
}

func (x *TypeDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TypeDefinition) GetRelations() map[string]*Userset {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *TypeDefinition) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rewrite  *Userset          `protobuf:"bytes,2,opt,name=rewrite,proto3" json:"rewrite,omitempty"`
	TypeInfo *RelationTypeInfo `protobuf:"bytes,3,opt,name=type_info,json=typeInfo,proto3" json:"type_info,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{2}
}

func (x *Relation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Relation) GetRewrite() *Userset {
	if x != nil {
		return x.Rewrite
	}
	return nil
}

func (x *Relation) GetTypeInfo() *RelationTypeInfo {
	if x != nil {
		return x.TypeInfo
	}
	return nil
}

type RelationTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectlyRelatedUserTypes []*RelationReference `protobuf:"bytes,1,rep,name=directly_related_user_types,proto3" json:"directly_related_user_types,omitempty"`
}

func (x *RelationTypeInfo) Reset() {
	*x = RelationTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationTypeInfo) ProtoMessage() {}

func (x *RelationTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationTypeInfo.ProtoReflect.Descriptor instead.
func (*RelationTypeInfo) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{3}
}

func (x *RelationTypeInfo) GetDirectlyRelatedUserTypes() []*RelationReference {
	if x != nil {
		return x.DirectlyRelatedUserTypes
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relations  map[string]*RelationMetadata `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Module     string                       `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	SourceInfo *SourceInfo                  `protobuf:"bytes,3,opt,name=source_info,proto3" json:"source_info,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetRelations() map[string]*RelationMetadata {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *Metadata) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *Metadata) GetSourceInfo() *SourceInfo {
	if x != nil {
		return x.SourceInfo
	}
	return nil
}

type SourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *SourceInfo) Reset() {
	*x = SourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceInfo) ProtoMessage() {}

func (x *SourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceInfo.ProtoReflect.Descriptor instead.
func (*SourceInfo) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{5}
}

func (x *SourceInfo) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type RelationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectlyRelatedUserTypes []*RelationReference `protobuf:"bytes,1,rep,name=directly_related_user_types,proto3" json:"directly_related_user_types,omitempty"`
	Module                   string               `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	SourceInfo               *SourceInfo          `protobuf:"bytes,3,opt,name=source_info,proto3" json:"source_info,omitempty"`
}

func (x *RelationMetadata) Reset() {
	*x = RelationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationMetadata) ProtoMessage() {}

func (x *RelationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationMetadata.ProtoReflect.Descriptor instead.
func (*RelationMetadata) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{6}
}

func (x *RelationMetadata) GetDirectlyRelatedUserTypes() []*RelationReference {
	if x != nil {
		return x.DirectlyRelatedUserTypes
	}
	return nil
}

func (x *RelationMetadata) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *RelationMetadata) GetSourceInfo() *SourceInfo {
	if x != nil {
		return x.SourceInfo
	}
	return nil
}

// RelationReference represents a relation of a particular object type (e.g. 'document#viewer').
type RelationReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are assignable to RelationOrWildcard:
	//
	//	*RelationReference_Relation
	//	*RelationReference_Wildcard
	RelationOrWildcard isRelationReference_RelationOrWildcard `protobuf_oneof:"relation_or_wildcard"`
	// The name of a condition that is enforced over the allowed relation.
	Condition string `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *RelationReference) Reset() {
	*x = RelationReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationReference) ProtoMessage() {}

func (x *RelationReference) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationReference.ProtoReflect.Descriptor instead.
func (*RelationReference) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{7}
}

func (x *RelationReference) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *RelationReference) GetRelationOrWildcard() isRelationReference_RelationOrWildcard {
	if m != nil {
		return m.RelationOrWildcard
	}
	return nil
}

func (x *RelationReference) GetRelation() string {
	if x, ok := x.GetRelationOrWildcard().(*RelationReference_Relation); ok {
		return x.Relation
	}
	return ""
}

func (x *RelationReference) GetWildcard() *Wildcard {
	if x, ok := x.GetRelationOrWildcard().(*RelationReference_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

func (x *RelationReference) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

type isRelationReference_RelationOrWildcard interface {
	isRelationReference_RelationOrWildcard()
}

type RelationReference_Relation struct {
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3,oneof"`
}

type RelationReference_Wildcard struct {
	Wildcard *Wildcard `protobuf:"bytes,3,opt,name=wildcard,proto3,oneof"`
}

func (*RelationReference_Relation) isRelationReference_RelationOrWildcard() {}

func (*RelationReference_Wildcard) isRelationReference_RelationOrWildcard() {}

type Wildcard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Wildcard) Reset() {
	*x = Wildcard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wildcard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wildcard) ProtoMessage() {}

func (x *Wildcard) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wildcard.ProtoReflect.Descriptor instead.
func (*Wildcard) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{8}
}

type Usersets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child []*Userset `protobuf:"bytes,1,rep,name=child,proto3" json:"child,omitempty"`
}

func (x *Usersets) Reset() {
	*x = Usersets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Usersets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usersets) ProtoMessage() {}

func (x *Usersets) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usersets.ProtoReflect.Descriptor instead.
func (*Usersets) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{9}
}

func (x *Usersets) GetChild() []*Userset {
	if x != nil {
		return x.Child
	}
	return nil
}

type Difference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *Userset `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Subtract *Userset `protobuf:"bytes,2,opt,name=subtract,proto3" json:"subtract,omitempty"`
}

func (x *Difference) Reset() {
	*x = Difference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Difference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Difference) ProtoMessage() {}

func (x *Difference) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Difference.ProtoReflect.Descriptor instead.
func (*Difference) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{10}
}

func (x *Difference) GetBase() *Userset {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Difference) GetSubtract() *Userset {
	if x != nil {
		return x.Subtract
	}
	return nil
}

type Userset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Userset:
	//
	//	*Userset_This
	//	*Userset_ComputedUserset
	//	*Userset_TupleToUserset
	//	*Userset_Union
	//	*Userset_Intersection
	//	*Userset_Difference
	Userset isUserset_Userset `protobuf_oneof:"userset"`
}

func (x *Userset) Reset() {
	*x = Userset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Userset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Userset) ProtoMessage() {}

func (x *Userset) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Userset.ProtoReflect.Descriptor instead.
func (*Userset) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{11}
}

func (m *Userset) GetUserset() isUserset_Userset {
	if m != nil {
		return m.Userset
	}
	return nil
}

func (x *Userset) GetThis() *DirectUserset {
	if x, ok := x.GetUserset().(*Userset_This); ok {
		return x.This
	}
	return nil
}

func (x *Userset) GetComputedUserset() *ObjectRelation {
	if x, ok := x.GetUserset().(*Userset_ComputedUserset); ok {
		return x.ComputedUserset
	}
	return nil
}

func (x *Userset) GetTupleToUserset() *TupleToUserset {
	if x, ok := x.GetUserset().(*Userset_TupleToUserset); ok {
		return x.TupleToUserset
	}
	return nil
}

func (x *Userset) GetUnion() *Usersets {
	if x, ok := x.GetUserset().(*Userset_Union); ok {
		return x.Union
	}
	return nil
}

func (x *Userset) GetIntersection() *Usersets {
	if x, ok := x.GetUserset().(*Userset_Intersection); ok {
		return x.Intersection
	}
	return nil
}

func (x *Userset) GetDifference() *Difference {
	if x, ok := x.GetUserset().(*Userset_Difference); ok {
		return x.Difference
	}
	return nil
}

type isUserset_Userset interface {
	isUserset_Userset()
}

type Userset_This struct {
	This *DirectUserset `protobuf:"bytes,1,opt,name=this,proto3,oneof"`
}

type Userset_ComputedUserset struct {
	ComputedUserset *ObjectRelation `protobuf:"bytes,2,opt,name=computed_userset,json=computedUserset,proto3,oneof"`
}

type Userset_TupleToUserset struct {
	TupleToUserset *TupleToUserset `protobuf:"bytes,3,opt,name=tuple_to_userset,json=tupleToUserset,proto3,oneof"`
}

type Userset_Union struct {
	Union *Usersets `protobuf:"bytes,4,opt,name=union,proto3,oneof"`
}

type Userset_Intersection struct {
	Intersection *Usersets `protobuf:"bytes,5,opt,name=intersection,proto3,oneof"`
}

type Userset_Difference struct {
	Difference *Difference `protobuf:"bytes,6,opt,name=difference,proto3,oneof"`
}

func (*Userset_This) isUserset_Userset() {}

func (*Userset_ComputedUserset) isUserset_Userset() {}

func (*Userset_TupleToUserset) isUserset_Userset() {}

func (*Userset_Union) isUserset_Userset() {}

func (*Userset_Intersection) isUserset_Userset() {}

func (*Userset_Difference) isUserset_Userset() {}

// A DirectUserset is a sentinel message for referencing
// the direct members specified by an object/relation mapping.
type DirectUserset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DirectUserset) Reset() {
	*x = DirectUserset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectUserset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectUserset) ProtoMessage() {}

func (x *DirectUserset) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectUserset.ProtoReflect.Descriptor instead.
func (*DirectUserset) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{12}
}

type ObjectRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object   string `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *ObjectRelation) Reset() {
	*x = ObjectRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectRelation) ProtoMessage() {}

func (x *ObjectRelation) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectRelation.ProtoReflect.Descriptor instead.
func (*ObjectRelation) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{13}
}

func (x *ObjectRelation) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ObjectRelation) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

type ComputedUserset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation string `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *ComputedUserset) Reset() {
	*x = ComputedUserset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputedUserset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputedUserset) ProtoMessage() {}

func (x *ComputedUserset) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputedUserset.ProtoReflect.Descriptor instead.
func (*ComputedUserset) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{14}
}

func (x *ComputedUserset) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

type TupleToUserset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target object/relation
	Tupleset        *ObjectRelation `protobuf:"bytes,1,opt,name=tupleset,proto3" json:"tupleset,omitempty"`
	ComputedUserset *ObjectRelation `protobuf:"bytes,2,opt,name=computed_userset,json=computedUserset,proto3" json:"computed_userset,omitempty"`
}

func (x *TupleToUserset) Reset() {
	*x = TupleToUserset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleToUserset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleToUserset) ProtoMessage() {}

func (x *TupleToUserset) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleToUserset.ProtoReflect.Descriptor instead.
func (*TupleToUserset) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{15}
}

func (x *TupleToUserset) GetTupleset() *ObjectRelation {
	if x != nil {
		return x.Tupleset
	}
	return nil
}

func (x *TupleToUserset) GetComputedUserset() *ObjectRelation {
	if x != nil {
		return x.ComputedUserset
	}
	return nil
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique name for the condition
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A Google CEL expression, expressed as a string.
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	// A map of parameter names to the parameter's defined type reference.
	Parameters map[string]*ConditionParamTypeRef `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metadata   *ConditionMetadata                `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{16}
}

func (x *Condition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Condition) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Condition) GetParameters() map[string]*ConditionParamTypeRef {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Condition) GetMetadata() *ConditionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ConditionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module     string      `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	SourceInfo *SourceInfo `protobuf:"bytes,2,opt,name=source_info,proto3" json:"source_info,omitempty"`
}

func (x *ConditionMetadata) Reset() {
	*x = ConditionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionMetadata) ProtoMessage() {}

func (x *ConditionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionMetadata.ProtoReflect.Descriptor instead.
func (*ConditionMetadata) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{17}
}

func (x *ConditionMetadata) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *ConditionMetadata) GetSourceInfo() *SourceInfo {
	if x != nil {
		return x.SourceInfo
	}
	return nil
}

type ConditionParamTypeRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName     ConditionParamTypeRef_TypeName `protobuf:"varint,1,opt,name=type_name,proto3,enum=openfga.v1.ConditionParamTypeRef_TypeName" json:"type_name,omitempty"`
	GenericTypes []*ConditionParamTypeRef       `protobuf:"bytes,2,rep,name=generic_types,proto3" json:"generic_types,omitempty"`
}

func (x *ConditionParamTypeRef) Reset() {
	*x = ConditionParamTypeRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_authzmodel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionParamTypeRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionParamTypeRef) ProtoMessage() {}

func (x *ConditionParamTypeRef) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_authzmodel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionParamTypeRef.ProtoReflect.Descriptor instead.
func (*ConditionParamTypeRef) Descriptor() ([]byte, []int) {
	return file_openfga_v1_authzmodel_proto_rawDescGZIP(), []int{18}
}

func (x *ConditionParamTypeRef) GetTypeName() ConditionParamTypeRef_TypeName {
	if x != nil {
		return x.TypeName
	}
	return ConditionParamTypeRef_TYPE_NAME_UNSPECIFIED
}

func (x *ConditionParamTypeRef) GetGenericTypes() []*ConditionParamTypeRef {
	if x != nil {
		return x.GenericTypes
	}
	return nil
}

var File_openfga_v1_authzmodel_proto protoreflect.FileDescriptor

var file_openfga_v1_authzmodel_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x7a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x94, 0x06, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x5f, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x1e, 0x4a, 0x1c, 0x22, 0x30, 0x31,
	0x47, 0x35, 0x4a, 0x41, 0x56, 0x4a, 0x34, 0x31, 0x54, 0x34, 0x39, 0x45, 0x39, 0x54, 0x54, 0x33,
	0x53, 0x4b, 0x56, 0x53, 0x37, 0x58, 0x31, 0x4a, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x28, 0x72,
	0x26, 0x32, 0x21, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x4a, 0x4b, 0x4d,
	0x4e, 0x50, 0x51, 0x52, 0x53, 0x54, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b,
	0x32, 0x36, 0x7d, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x0d, 0x5e,
	0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x2e, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x24, 0xd0, 0x01, 0x00, 0x52,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x8f, 0x03, 0x0a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xc6, 0x02, 0x92, 0x41, 0xbf, 0x02, 0x4a, 0xbc, 0x02,
	0x5b, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x7d, 0x2c, 0x20, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x3a, 0x7b, 0x22, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x3a, 0x5b, 0x7b,
	0x22, 0x74, 0x68, 0x69, 0x73, 0x22, 0x3a, 0x7b, 0x7d, 0x7d, 0x2c, 0x7b, 0x22, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x22, 0x3a, 0x7b, 0x22,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3a, 0x22, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x22, 0x7d, 0x7d,
	0x5d, 0x7d, 0x7d, 0x2c, 0x22, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x74,
	0x68, 0x69, 0x73, 0x22, 0x3a, 0x7b, 0x7d, 0x7d, 0x7d, 0x2c, 0x22, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3a, 0x7b, 0x22, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x3a, 0x7b, 0x22, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22, 0x7d, 0x5d, 0x7d, 0x2c, 0x22, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c,
	0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22,
	0x75, 0x73, 0x65, 0x72, 0x22, 0x7d, 0x5d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5d, 0xe0, 0x41, 0x02, 0x52,
	0x10, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x71, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x21, 0xfa, 0x42, 0x1e, 0x9a, 0x01, 0x1b, 0x10, 0x19, 0x22,
	0x17, 0x72, 0x15, 0x32, 0x10, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31,
	0x2c, 0x35, 0x30, 0x7d, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x54, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd, 0x03, 0x0a, 0x0e, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x0c,
	0x4a, 0x0a, 0x22, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x18, 0x72, 0x16, 0x32, 0x11, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b,
	0x31, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0xe2, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x98, 0x01, 0x92, 0x41, 0x79, 0x4a, 0x77, 0x7b, 0x22, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22,
	0x3a, 0x7b, 0x22, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x74, 0x68, 0x69, 0x73, 0x22, 0x3a, 0x7b, 0x7d, 0x7d, 0x2c,
	0x7b, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x22, 0x3a, 0x7b, 0x22, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3a, 0x22, 0x22, 0x2c,
	0x22, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x22, 0x7d, 0x7d, 0x5d, 0x7d, 0x7d, 0x2c, 0x22, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x22, 0x3a, 0x7b, 0x22, 0x74, 0x68, 0x69, 0x73, 0x22, 0x3a, 0x7b, 0x7d, 0x7d, 0x7d, 0xfa, 0x42,
	0x19, 0x9a, 0x01, 0x16, 0x22, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40,
	0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x51, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x08, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x10, 0x5e, 0x5b,
	0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24, 0xd0, 0x01,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x42, 0x0b, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x72, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x73,
	0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x5f, 0x0a, 0x1b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x10, 0x5e, 0x5b, 0x5e, 0x3a,
	0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x1a, 0x5a, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a,
	0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x25, 0x72, 0x23,
	0x32, 0x1e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5c, 0x2d,
	0x5c, 0x2f, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x5c, 0x2e, 0x66, 0x67, 0x61, 0x24,
	0xd0, 0x01, 0x01, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f,
	0x0a, 0x1b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x1b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x10, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73,
	0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xa0, 0x02,
	0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x32, 0x11, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c,
	0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x10, 0x5e, 0x5b, 0x5e, 0x3a, 0x23,
	0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x77, 0x69,
	0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61,
	0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x10, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40,
	0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x22, 0x0a, 0x0a, 0x08, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x22, 0x3a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x65, 0x74, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0xfa, 0x02, 0x0a, 0x07,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x68, 0x69, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x68, 0x69, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x12, 0x46, 0x0a, 0x10, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x22, 0x57, 0x0a, 0x0e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x28, 0x80, 0x02, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x28, 0x32, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x28, 0x32, 0xd0, 0x01, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x22, 0xf2, 0x02, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x17,
	0x72, 0x15, 0x32, 0x10, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c,
	0x35, 0x30, 0x7d, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x28, 0x80, 0x04, 0xd0, 0x01,
	0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x9a, 0x01, 0x18,
	0x10, 0x19, 0x22, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73,
	0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x60, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x10,
	0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24,
	0xd0, 0x01, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd4, 0x03, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x12,
	0x55, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x05, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x08, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41,
	0x4e, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55,
	0x49, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x09, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x0b, 0x42, 0x9d, 0x01, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x42,
	0x0f, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x67, 0x61, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4f, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x4f, 0x70,
	0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x66,
	0x67, 0x61, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openfga_v1_authzmodel_proto_rawDescOnce sync.Once
	file_openfga_v1_authzmodel_proto_rawDescData = file_openfga_v1_authzmodel_proto_rawDesc
)

func file_openfga_v1_authzmodel_proto_rawDescGZIP() []byte {
	file_openfga_v1_authzmodel_proto_rawDescOnce.Do(func() {
		file_openfga_v1_authzmodel_proto_rawDescData = protoimpl.X.CompressGZIP(file_openfga_v1_authzmodel_proto_rawDescData)
	})
	return file_openfga_v1_authzmodel_proto_rawDescData
}

var file_openfga_v1_authzmodel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_openfga_v1_authzmodel_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_openfga_v1_authzmodel_proto_goTypes = []interface{}{
	(ConditionParamTypeRef_TypeName)(0), // 0: openfga.v1.ConditionParamTypeRef.TypeName
	(*AuthorizationModel)(nil),          // 1: openfga.v1.AuthorizationModel
	(*TypeDefinition)(nil),              // 2: openfga.v1.TypeDefinition
	(*Relation)(nil),                    // 3: openfga.v1.Relation
	(*RelationTypeInfo)(nil),            // 4: openfga.v1.RelationTypeInfo
	(*Metadata)(nil),                    // 5: openfga.v1.Metadata
	(*SourceInfo)(nil),                  // 6: openfga.v1.SourceInfo
	(*RelationMetadata)(nil),            // 7: openfga.v1.RelationMetadata
	(*RelationReference)(nil),           // 8: openfga.v1.RelationReference
	(*Wildcard)(nil),                    // 9: openfga.v1.Wildcard
	(*Usersets)(nil),                    // 10: openfga.v1.Usersets
	(*Difference)(nil),                  // 11: openfga.v1.Difference
	(*Userset)(nil),                     // 12: openfga.v1.Userset
	(*DirectUserset)(nil),               // 13: openfga.v1.DirectUserset
	(*ObjectRelation)(nil),              // 14: openfga.v1.ObjectRelation
	(*ComputedUserset)(nil),             // 15: openfga.v1.ComputedUserset
	(*TupleToUserset)(nil),              // 16: openfga.v1.TupleToUserset
	(*Condition)(nil),                   // 17: openfga.v1.Condition
	(*ConditionMetadata)(nil),           // 18: openfga.v1.ConditionMetadata
	(*ConditionParamTypeRef)(nil),       // 19: openfga.v1.ConditionParamTypeRef
	nil,                                 // 20: openfga.v1.AuthorizationModel.ConditionsEntry
	nil,                                 // 21: openfga.v1.TypeDefinition.RelationsEntry
	nil,                                 // 22: openfga.v1.Metadata.RelationsEntry
	nil,                                 // 23: openfga.v1.Condition.ParametersEntry
}
var file_openfga_v1_authzmodel_proto_depIdxs = []int32{
	2,  // 0: openfga.v1.AuthorizationModel.type_definitions:type_name -> openfga.v1.TypeDefinition
	20, // 1: openfga.v1.AuthorizationModel.conditions:type_name -> openfga.v1.AuthorizationModel.ConditionsEntry
	21, // 2: openfga.v1.TypeDefinition.relations:type_name -> openfga.v1.TypeDefinition.RelationsEntry
	5,  // 3: openfga.v1.TypeDefinition.metadata:type_name -> openfga.v1.Metadata
	12, // 4: openfga.v1.Relation.rewrite:type_name -> openfga.v1.Userset
	4,  // 5: openfga.v1.Relation.type_info:type_name -> openfga.v1.RelationTypeInfo
	8,  // 6: openfga.v1.RelationTypeInfo.directly_related_user_types:type_name -> openfga.v1.RelationReference
	22, // 7: openfga.v1.Metadata.relations:type_name -> openfga.v1.Metadata.RelationsEntry
	6,  // 8: openfga.v1.Metadata.source_info:type_name -> openfga.v1.SourceInfo
	8,  // 9: openfga.v1.RelationMetadata.directly_related_user_types:type_name -> openfga.v1.RelationReference
	6,  // 10: openfga.v1.RelationMetadata.source_info:type_name -> openfga.v1.SourceInfo
	9,  // 11: openfga.v1.RelationReference.wildcard:type_name -> openfga.v1.Wildcard
	12, // 12: openfga.v1.Usersets.child:type_name -> openfga.v1.Userset
	12, // 13: openfga.v1.Difference.base:type_name -> openfga.v1.Userset
	12, // 14: openfga.v1.Difference.subtract:type_name -> openfga.v1.Userset
	13, // 15: openfga.v1.Userset.this:type_name -> openfga.v1.DirectUserset
	14, // 16: openfga.v1.Userset.computed_userset:type_name -> openfga.v1.ObjectRelation
	16, // 17: openfga.v1.Userset.tuple_to_userset:type_name -> openfga.v1.TupleToUserset
	10, // 18: openfga.v1.Userset.union:type_name -> openfga.v1.Usersets
	10, // 19: openfga.v1.Userset.intersection:type_name -> openfga.v1.Usersets
	11, // 20: openfga.v1.Userset.difference:type_name -> openfga.v1.Difference
	14, // 21: openfga.v1.TupleToUserset.tupleset:type_name -> openfga.v1.ObjectRelation
	14, // 22: openfga.v1.TupleToUserset.computed_userset:type_name -> openfga.v1.ObjectRelation
	23, // 23: openfga.v1.Condition.parameters:type_name -> openfga.v1.Condition.ParametersEntry
	18, // 24: openfga.v1.Condition.metadata:type_name -> openfga.v1.ConditionMetadata
	6,  // 25: openfga.v1.ConditionMetadata.source_info:type_name -> openfga.v1.SourceInfo
	0,  // 26: openfga.v1.ConditionParamTypeRef.type_name:type_name -> openfga.v1.ConditionParamTypeRef.TypeName
	19, // 27: openfga.v1.ConditionParamTypeRef.generic_types:type_name -> openfga.v1.ConditionParamTypeRef
	17, // 28: openfga.v1.AuthorizationModel.ConditionsEntry.value:type_name -> openfga.v1.Condition
	12, // 29: openfga.v1.TypeDefinition.RelationsEntry.value:type_name -> openfga.v1.Userset
	7,  // 30: openfga.v1.Metadata.RelationsEntry.value:type_name -> openfga.v1.RelationMetadata
	19, // 31: openfga.v1.Condition.ParametersEntry.value:type_name -> openfga.v1.ConditionParamTypeRef
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_openfga_v1_authzmodel_proto_init() }
func file_openfga_v1_authzmodel_proto_init() {
	if File_openfga_v1_authzmodel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openfga_v1_authzmodel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wildcard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Usersets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Difference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Userset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectUserset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputedUserset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleToUserset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_authzmodel_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionParamTypeRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openfga_v1_authzmodel_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*RelationReference_Relation)(nil),
		(*RelationReference_Wildcard)(nil),
	}
	file_openfga_v1_authzmodel_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Userset_This)(nil),
		(*Userset_ComputedUserset)(nil),
		(*Userset_TupleToUserset)(nil),
		(*Userset_Union)(nil),
		(*Userset_Intersection)(nil),
		(*Userset_Difference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openfga_v1_authzmodel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openfga_v1_authzmodel_proto_goTypes,
		DependencyIndexes: file_openfga_v1_authzmodel_proto_depIdxs,
		EnumInfos:         file_openfga_v1_authzmodel_proto_enumTypes,
		MessageInfos:      file_openfga_v1_authzmodel_proto_msgTypes,
	}.Build()
	File_openfga_v1_authzmodel_proto = out.File
	file_openfga_v1_authzmodel_proto_rawDesc = nil
	file_openfga_v1_authzmodel_proto_goTypes = nil
	file_openfga_v1_authzmodel_proto_depIdxs = nil
}
