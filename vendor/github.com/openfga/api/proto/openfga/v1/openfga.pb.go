// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: openfga/v1/openfga.proto

package openfgav1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
type TupleOperation int32

const (
	TupleOperation_TUPLE_OPERATION_WRITE  TupleOperation = 0
	TupleOperation_TUPLE_OPERATION_DELETE TupleOperation = 1
)

// Enum value maps for TupleOperation.
var (
	TupleOperation_name = map[int32]string{
		0: "TUPLE_OPERATION_WRITE",
		1: "TUPLE_OPERATION_DELETE",
	}
	TupleOperation_value = map[string]int32{
		"TUPLE_OPERATION_WRITE":  0,
		"TUPLE_OPERATION_DELETE": 1,
	}
)

func (x TupleOperation) Enum() *TupleOperation {
	p := new(TupleOperation)
	*p = x
	return p
}

func (x TupleOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TupleOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_openfga_v1_openfga_proto_enumTypes[0].Descriptor()
}

func (TupleOperation) Type() protoreflect.EnumType {
	return &file_openfga_v1_openfga_proto_enumTypes[0]
}

func (x TupleOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TupleOperation.Descriptor instead.
func (TupleOperation) EnumDescriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{0}
}

// Object represents an OpenFGA Object.
//
// An Object is composed of a type and identifier (e.g. 'document:1')
//
// See https://openfga.dev/docs/concepts#what-is-an-object
type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{0}
}

func (x *Object) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Object) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// User.
//
// Represents any possible value for a user (subject or principal). Can be a:
// - Specific user object e.g.: 'user:will', 'folder:marketing', 'org:contoso', ...)
// - Specific userset (e.g. 'group:engineering#member')
// - Public-typed wildcard (e.g. 'user:*')
//
// See https://openfga.dev/docs/concepts#what-is-a-user
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to User:
	//
	//	*User_Object
	//	*User_Userset
	//	*User_Wildcard
	User isUser_User `protobuf_oneof:"user"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{1}
}

func (m *User) GetUser() isUser_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (x *User) GetObject() *Object {
	if x, ok := x.GetUser().(*User_Object); ok {
		return x.Object
	}
	return nil
}

func (x *User) GetUserset() *UsersetUser {
	if x, ok := x.GetUser().(*User_Userset); ok {
		return x.Userset
	}
	return nil
}

func (x *User) GetWildcard() *TypedWildcard {
	if x, ok := x.GetUser().(*User_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

type isUser_User interface {
	isUser_User()
}

type User_Object struct {
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3,oneof"`
}

type User_Userset struct {
	Userset *UsersetUser `protobuf:"bytes,2,opt,name=userset,proto3,oneof"`
}

type User_Wildcard struct {
	Wildcard *TypedWildcard `protobuf:"bytes,3,opt,name=wildcard,proto3,oneof"`
}

func (*User_Object) isUser_User() {}

func (*User_Userset) isUser_User() {}

func (*User_Wildcard) isUser_User() {}

// Userset.
//
// A set or group of users, represented in the `<type>:<id>#<relation>` format
//
// `group:fga#member` represents all members of group FGA, not to be confused by `group:fga` which represents the group itself as a specific object.
//
// See: https://openfga.dev/docs/modeling/building-blocks/usersets#what-is-a-userset
type UsersetUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Relation string `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *UsersetUser) Reset() {
	*x = UsersetUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersetUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersetUser) ProtoMessage() {}

func (x *UsersetUser) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersetUser.ProtoReflect.Descriptor instead.
func (*UsersetUser) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{2}
}

func (x *UsersetUser) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UsersetUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UsersetUser) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

type RelationshipCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A reference (by name) of the relationship condition defined in the authorization model.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Additional context/data to persist along with the condition.
	// The keys must match the parameters defined by the condition, and the value types must
	// match the parameter type definitions.
	Context *structpb.Struct `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *RelationshipCondition) Reset() {
	*x = RelationshipCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationshipCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationshipCondition) ProtoMessage() {}

func (x *RelationshipCondition) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationshipCondition.ProtoReflect.Descriptor instead.
func (*RelationshipCondition) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{3}
}

func (x *RelationshipCondition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelationshipCondition) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

type TupleKeyWithoutCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	Object   string `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *TupleKeyWithoutCondition) Reset() {
	*x = TupleKeyWithoutCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleKeyWithoutCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleKeyWithoutCondition) ProtoMessage() {}

func (x *TupleKeyWithoutCondition) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleKeyWithoutCondition.ProtoReflect.Descriptor instead.
func (*TupleKeyWithoutCondition) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{4}
}

func (x *TupleKeyWithoutCondition) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TupleKeyWithoutCondition) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *TupleKeyWithoutCondition) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

// Type bound public access.
//
// Normally represented using the `<type>:*` syntax
//
// `employee:*` represents every object of type `employee`, including those not currently present in the system
//
// See https://openfga.dev/docs/concepts#what-is-type-bound-public-access
type TypedWildcard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *TypedWildcard) Reset() {
	*x = TypedWildcard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedWildcard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedWildcard) ProtoMessage() {}

func (x *TypedWildcard) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedWildcard.ProtoReflect.Descriptor instead.
func (*TypedWildcard) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{5}
}

func (x *TypedWildcard) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type TupleKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Relation  string                 `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	Object    string                 `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Condition *RelationshipCondition `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *TupleKey) Reset() {
	*x = TupleKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleKey) ProtoMessage() {}

func (x *TupleKey) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleKey.ProtoReflect.Descriptor instead.
func (*TupleKey) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{6}
}

func (x *TupleKey) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TupleKey) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *TupleKey) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *TupleKey) GetCondition() *RelationshipCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type Tuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       *TupleKey              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Tuple) Reset() {
	*x = Tuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tuple) ProtoMessage() {}

func (x *Tuple) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tuple.ProtoReflect.Descriptor instead.
func (*Tuple) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{7}
}

func (x *Tuple) GetKey() *TupleKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Tuple) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type TupleKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TupleKeys []*TupleKey `protobuf:"bytes,1,rep,name=tuple_keys,proto3" json:"tuple_keys,omitempty"`
}

func (x *TupleKeys) Reset() {
	*x = TupleKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleKeys) ProtoMessage() {}

func (x *TupleKeys) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleKeys.ProtoReflect.Descriptor instead.
func (*TupleKeys) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{8}
}

func (x *TupleKeys) GetTupleKeys() []*TupleKey {
	if x != nil {
		return x.TupleKeys
	}
	return nil
}

type ContextualTupleKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TupleKeys []*TupleKey `protobuf:"bytes,1,rep,name=tuple_keys,proto3" json:"tuple_keys,omitempty"`
}

func (x *ContextualTupleKeys) Reset() {
	*x = ContextualTupleKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextualTupleKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextualTupleKeys) ProtoMessage() {}

func (x *ContextualTupleKeys) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextualTupleKeys.ProtoReflect.Descriptor instead.
func (*ContextualTupleKeys) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{9}
}

func (x *ContextualTupleKeys) GetTupleKeys() []*TupleKey {
	if x != nil {
		return x.TupleKeys
	}
	return nil
}

// A UsersetTree contains the result of an Expansion.
type UsersetTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root *UsersetTree_Node `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *UsersetTree) Reset() {
	*x = UsersetTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersetTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersetTree) ProtoMessage() {}

func (x *UsersetTree) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersetTree.ProtoReflect.Descriptor instead.
func (*UsersetTree) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{10}
}

func (x *UsersetTree) GetRoot() *UsersetTree_Node {
	if x != nil {
		return x.Root
	}
	return nil
}

type TupleChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TupleKey  *TupleKey              `protobuf:"bytes,1,opt,name=tuple_key,proto3" json:"tuple_key,omitempty"`
	Operation TupleOperation         `protobuf:"varint,2,opt,name=operation,proto3,enum=openfga.v1.TupleOperation" json:"operation,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TupleChange) Reset() {
	*x = TupleChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleChange) ProtoMessage() {}

func (x *TupleChange) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleChange.ProtoReflect.Descriptor instead.
func (*TupleChange) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{11}
}

func (x *TupleChange) GetTupleKey() *TupleKey {
	if x != nil {
		return x.TupleKey
	}
	return nil
}

func (x *TupleChange) GetOperation() TupleOperation {
	if x != nil {
		return x.Operation
	}
	return TupleOperation_TUPLE_OPERATION_WRITE
}

func (x *TupleChange) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=deleted_at,proto3" json:"deleted_at,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{12}
}

func (x *Store) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Store) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Store) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Store) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type UserTypeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *UserTypeFilter) Reset() {
	*x = UserTypeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTypeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTypeFilter) ProtoMessage() {}

func (x *UserTypeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTypeFilter.ProtoReflect.Descriptor instead.
func (*UserTypeFilter) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{13}
}

func (x *UserTypeFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserTypeFilter) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

// A leaf node contains either
//   - a set of users (which may be individual users, or usersets
//     referencing other relations)
//   - a computed node, which is the result of a computed userset
//     value in the authorization model
//   - a tupleToUserset nodes, containing the result of expanding
//     a tupleToUserset value in a authorization model.
type UsersetTree_Leaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*UsersetTree_Leaf_Users
	//	*UsersetTree_Leaf_Computed
	//	*UsersetTree_Leaf_TupleToUserset
	Value isUsersetTree_Leaf_Value `protobuf_oneof:"value"`
}

func (x *UsersetTree_Leaf) Reset() {
	*x = UsersetTree_Leaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersetTree_Leaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersetTree_Leaf) ProtoMessage() {}

func (x *UsersetTree_Leaf) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersetTree_Leaf.ProtoReflect.Descriptor instead.
func (*UsersetTree_Leaf) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UsersetTree_Leaf) GetValue() isUsersetTree_Leaf_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UsersetTree_Leaf) GetUsers() *UsersetTree_Users {
	if x, ok := x.GetValue().(*UsersetTree_Leaf_Users); ok {
		return x.Users
	}
	return nil
}

func (x *UsersetTree_Leaf) GetComputed() *UsersetTree_Computed {
	if x, ok := x.GetValue().(*UsersetTree_Leaf_Computed); ok {
		return x.Computed
	}
	return nil
}

func (x *UsersetTree_Leaf) GetTupleToUserset() *UsersetTree_TupleToUserset {
	if x, ok := x.GetValue().(*UsersetTree_Leaf_TupleToUserset); ok {
		return x.TupleToUserset
	}
	return nil
}

type isUsersetTree_Leaf_Value interface {
	isUsersetTree_Leaf_Value()
}

type UsersetTree_Leaf_Users struct {
	Users *UsersetTree_Users `protobuf:"bytes,1,opt,name=users,proto3,oneof"`
}

type UsersetTree_Leaf_Computed struct {
	Computed *UsersetTree_Computed `protobuf:"bytes,2,opt,name=computed,proto3,oneof"`
}

type UsersetTree_Leaf_TupleToUserset struct {
	TupleToUserset *UsersetTree_TupleToUserset `protobuf:"bytes,3,opt,name=tuple_to_userset,json=tupleToUserset,proto3,oneof"`
}

func (*UsersetTree_Leaf_Users) isUsersetTree_Leaf_Value() {}

func (*UsersetTree_Leaf_Computed) isUsersetTree_Leaf_Value() {}

func (*UsersetTree_Leaf_TupleToUserset) isUsersetTree_Leaf_Value() {}

type UsersetTree_Nodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*UsersetTree_Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *UsersetTree_Nodes) Reset() {
	*x = UsersetTree_Nodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersetTree_Nodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersetTree_Nodes) ProtoMessage() {}

func (x *UsersetTree_Nodes) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersetTree_Nodes.ProtoReflect.Descriptor instead.
func (*UsersetTree_Nodes) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{10, 1}
}

func (x *UsersetTree_Nodes) GetNodes() []*UsersetTree_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type UsersetTree_Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UsersetTree_Users) Reset() {
	*x = UsersetTree_Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersetTree_Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersetTree_Users) ProtoMessage() {}

func (x *UsersetTree_Users) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersetTree_Users.ProtoReflect.Descriptor instead.
func (*UsersetTree_Users) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{10, 2}
}

func (x *UsersetTree_Users) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

type UsersetTree_Computed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userset string `protobuf:"bytes,1,opt,name=userset,proto3" json:"userset,omitempty"`
}

func (x *UsersetTree_Computed) Reset() {
	*x = UsersetTree_Computed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersetTree_Computed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersetTree_Computed) ProtoMessage() {}

func (x *UsersetTree_Computed) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersetTree_Computed.ProtoReflect.Descriptor instead.
func (*UsersetTree_Computed) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{10, 3}
}

func (x *UsersetTree_Computed) GetUserset() string {
	if x != nil {
		return x.Userset
	}
	return ""
}

type UsersetTree_TupleToUserset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tupleset string                  `protobuf:"bytes,1,opt,name=tupleset,proto3" json:"tupleset,omitempty"`
	Computed []*UsersetTree_Computed `protobuf:"bytes,2,rep,name=computed,proto3" json:"computed,omitempty"`
}

func (x *UsersetTree_TupleToUserset) Reset() {
	*x = UsersetTree_TupleToUserset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersetTree_TupleToUserset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersetTree_TupleToUserset) ProtoMessage() {}

func (x *UsersetTree_TupleToUserset) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersetTree_TupleToUserset.ProtoReflect.Descriptor instead.
func (*UsersetTree_TupleToUserset) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{10, 4}
}

func (x *UsersetTree_TupleToUserset) GetTupleset() string {
	if x != nil {
		return x.Tupleset
	}
	return ""
}

func (x *UsersetTree_TupleToUserset) GetComputed() []*UsersetTree_Computed {
	if x != nil {
		return x.Computed
	}
	return nil
}

type UsersetTree_Difference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *UsersetTree_Node `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Subtract *UsersetTree_Node `protobuf:"bytes,2,opt,name=subtract,proto3" json:"subtract,omitempty"`
}

func (x *UsersetTree_Difference) Reset() {
	*x = UsersetTree_Difference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersetTree_Difference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersetTree_Difference) ProtoMessage() {}

func (x *UsersetTree_Difference) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersetTree_Difference.ProtoReflect.Descriptor instead.
func (*UsersetTree_Difference) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{10, 5}
}

func (x *UsersetTree_Difference) GetBase() *UsersetTree_Node {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UsersetTree_Difference) GetSubtract() *UsersetTree_Node {
	if x != nil {
		return x.Subtract
	}
	return nil
}

type UsersetTree_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//
	//	*UsersetTree_Node_Leaf
	//	*UsersetTree_Node_Difference
	//	*UsersetTree_Node_Union
	//	*UsersetTree_Node_Intersection
	Value isUsersetTree_Node_Value `protobuf_oneof:"value"`
}

func (x *UsersetTree_Node) Reset() {
	*x = UsersetTree_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openfga_v1_openfga_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersetTree_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersetTree_Node) ProtoMessage() {}

func (x *UsersetTree_Node) ProtoReflect() protoreflect.Message {
	mi := &file_openfga_v1_openfga_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersetTree_Node.ProtoReflect.Descriptor instead.
func (*UsersetTree_Node) Descriptor() ([]byte, []int) {
	return file_openfga_v1_openfga_proto_rawDescGZIP(), []int{10, 6}
}

func (x *UsersetTree_Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *UsersetTree_Node) GetValue() isUsersetTree_Node_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UsersetTree_Node) GetLeaf() *UsersetTree_Leaf {
	if x, ok := x.GetValue().(*UsersetTree_Node_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (x *UsersetTree_Node) GetDifference() *UsersetTree_Difference {
	if x, ok := x.GetValue().(*UsersetTree_Node_Difference); ok {
		return x.Difference
	}
	return nil
}

func (x *UsersetTree_Node) GetUnion() *UsersetTree_Nodes {
	if x, ok := x.GetValue().(*UsersetTree_Node_Union); ok {
		return x.Union
	}
	return nil
}

func (x *UsersetTree_Node) GetIntersection() *UsersetTree_Nodes {
	if x, ok := x.GetValue().(*UsersetTree_Node_Intersection); ok {
		return x.Intersection
	}
	return nil
}

type isUsersetTree_Node_Value interface {
	isUsersetTree_Node_Value()
}

type UsersetTree_Node_Leaf struct {
	Leaf *UsersetTree_Leaf `protobuf:"bytes,2,opt,name=leaf,proto3,oneof"`
}

type UsersetTree_Node_Difference struct {
	Difference *UsersetTree_Difference `protobuf:"bytes,5,opt,name=difference,proto3,oneof"`
}

type UsersetTree_Node_Union struct {
	Union *UsersetTree_Nodes `protobuf:"bytes,6,opt,name=union,proto3,oneof"`
}

type UsersetTree_Node_Intersection struct {
	Intersection *UsersetTree_Nodes `protobuf:"bytes,7,opt,name=intersection,proto3,oneof"`
}

func (*UsersetTree_Node_Leaf) isUsersetTree_Node_Value() {}

func (*UsersetTree_Node_Difference) isUsersetTree_Node_Value() {}

func (*UsersetTree_Node_Union) isUsersetTree_Node_Value() {}

func (*UsersetTree_Node_Intersection) isUsersetTree_Node_Value() {}

var File_openfga_v1_openfga_proto protoreflect.FileDescriptor

var file_openfga_v1_openfga_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9e, 0x01, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x18, 0x72,
	0x16, 0x32, 0x11, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x28, 0x4a, 0x26,
	0x22, 0x30, 0x62, 0x63, 0x64, 0x66, 0x36, 0x66, 0x61, 0x2d, 0x61, 0x36, 0x61, 0x61, 0x2d, 0x34,
	0x37, 0x33, 0x30, 0x2d, 0x61, 0x38, 0x65, 0x62, 0x2d, 0x39, 0x63, 0x66, 0x31, 0x37, 0x32, 0x66,
	0x66, 0x31, 0x36, 0x64, 0x39, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x09,
	0x5b, 0x5e, 0x23, 0x3a, 0x5c, 0x73, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xaa, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x08,
	0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x64, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xc7, 0x01,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x09,
	0x4a, 0x07, 0x22, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x18, 0x72,
	0x16, 0x32, 0x11, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x32,
	0x35, 0x34, 0x7d, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x07, 0x4a, 0x05,
	0x22, 0x66, 0x67, 0x61, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x09, 0x5b,
	0x5e, 0x23, 0x3a, 0x5c, 0x73, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x46, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x10, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40,
	0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2f, 0x92, 0x41, 0x11, 0x4a, 0x0c, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x31, 0x22, 0x78, 0x80, 0x02, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x32, 0x0e, 0x5e,
	0x5b, 0x5e, 0x5c, 0x73, 0x5d, 0x7b, 0x32, 0x2c, 0x32, 0x35, 0x36, 0x7d, 0x24, 0xd0, 0x01, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x18, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x10, 0x4a, 0x0b, 0x22, 0x75, 0x73, 0x65, 0x72,
	0x3a, 0x61, 0x6e, 0x6e, 0x65, 0x22, 0x78, 0x80, 0x04, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x28, 0x80, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41,
	0x0c, 0x4a, 0x08, 0x22, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x78, 0x32, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x10, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73, 0x5d,
	0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x1b, 0x4a, 0x16, 0x22, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x22, 0x78, 0x80, 0x02, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x32, 0x0e, 0x5e, 0x5b,
	0x5e, 0x5c, 0x73, 0x5d, 0x7b, 0x32, 0x2c, 0x32, 0x35, 0x36, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x52, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x64,
	0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x32,
	0x11, 0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x32, 0x35, 0x34,
	0x7d, 0x24, 0xd0, 0x01, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x08,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x10, 0x4a, 0x0b, 0x22, 0x75, 0x73,
	0x65, 0x72, 0x3a, 0x61, 0x6e, 0x6e, 0x65, 0x22, 0x78, 0x80, 0x04, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x08, 0x72, 0x06, 0x28, 0x80, 0x04, 0xd0, 0x01, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2c, 0x92, 0x41, 0x0c, 0x4a, 0x08, 0x22, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22,
	0x78, 0x32, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x10, 0x5e, 0x5b, 0x5e, 0x3a,
	0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x1b, 0x4a, 0x16,
	0x22, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x62,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x22, 0x78, 0x80, 0x02, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x15, 0x72,
	0x13, 0x32, 0x0e, 0x5e, 0x5b, 0x5e, 0x5c, 0x73, 0x5d, 0x7b, 0x32, 0x2c, 0x32, 0x35, 0x36, 0x7d,
	0x24, 0xd0, 0x01, 0x01, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a,
	0x05, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5a, 0x0a, 0x09, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x17, 0x92, 0x41, 0x09, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x64, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x61, 0x6c, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4d, 0x0a,
	0x0a, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x17, 0x92, 0x41, 0x09, 0x59, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x34, 0x40, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x14,
	0x52, 0x0a, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xe9, 0x07, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x54,
	0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x1a, 0xda,
	0x01, 0x0a, 0x04, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x35, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3e,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x12, 0x52,
	0x0a, 0x10, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x40, 0x0a, 0x05, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x22, 0x0a,
	0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x1a, 0x31, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0, 0x01, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x65, 0x74, 0x1a, 0x7c, 0x0a, 0x0e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0xd0, 0x01, 0x00, 0x52, 0x08, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x41, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x9e, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x65, 0x61,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x2e, 0x4c, 0x65, 0x61, 0x66, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x44, 0x0a,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x83, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0,
	0x01, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0, 0x01,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x32, 0x11, 0x5e, 0x5b,
	0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x32, 0x35, 0x34, 0x7d, 0x24, 0xd0,
	0x01, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x0a, 0x4a,
	0x08, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x10,
	0x5e, 0x5b, 0x5e, 0x3a, 0x23, 0x40, 0x5c, 0x73, 0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x30, 0x7d, 0x24,
	0xd0, 0x01, 0x01, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x47, 0x0a,
	0x0e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x55,
	0x50, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x42, 0x9a, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x66,
	0x67, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2f,
	0x76, 0x31, 0x3b, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4f,
	0x58, 0x58, 0xaa, 0x02, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x4f,
	0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openfga_v1_openfga_proto_rawDescOnce sync.Once
	file_openfga_v1_openfga_proto_rawDescData = file_openfga_v1_openfga_proto_rawDesc
)

func file_openfga_v1_openfga_proto_rawDescGZIP() []byte {
	file_openfga_v1_openfga_proto_rawDescOnce.Do(func() {
		file_openfga_v1_openfga_proto_rawDescData = protoimpl.X.CompressGZIP(file_openfga_v1_openfga_proto_rawDescData)
	})
	return file_openfga_v1_openfga_proto_rawDescData
}

var file_openfga_v1_openfga_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_openfga_v1_openfga_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_openfga_v1_openfga_proto_goTypes = []interface{}{
	(TupleOperation)(0),                // 0: openfga.v1.TupleOperation
	(*Object)(nil),                     // 1: openfga.v1.Object
	(*User)(nil),                       // 2: openfga.v1.User
	(*UsersetUser)(nil),                // 3: openfga.v1.UsersetUser
	(*RelationshipCondition)(nil),      // 4: openfga.v1.RelationshipCondition
	(*TupleKeyWithoutCondition)(nil),   // 5: openfga.v1.TupleKeyWithoutCondition
	(*TypedWildcard)(nil),              // 6: openfga.v1.TypedWildcard
	(*TupleKey)(nil),                   // 7: openfga.v1.TupleKey
	(*Tuple)(nil),                      // 8: openfga.v1.Tuple
	(*TupleKeys)(nil),                  // 9: openfga.v1.TupleKeys
	(*ContextualTupleKeys)(nil),        // 10: openfga.v1.ContextualTupleKeys
	(*UsersetTree)(nil),                // 11: openfga.v1.UsersetTree
	(*TupleChange)(nil),                // 12: openfga.v1.TupleChange
	(*Store)(nil),                      // 13: openfga.v1.Store
	(*UserTypeFilter)(nil),             // 14: openfga.v1.UserTypeFilter
	(*UsersetTree_Leaf)(nil),           // 15: openfga.v1.UsersetTree.Leaf
	(*UsersetTree_Nodes)(nil),          // 16: openfga.v1.UsersetTree.Nodes
	(*UsersetTree_Users)(nil),          // 17: openfga.v1.UsersetTree.Users
	(*UsersetTree_Computed)(nil),       // 18: openfga.v1.UsersetTree.Computed
	(*UsersetTree_TupleToUserset)(nil), // 19: openfga.v1.UsersetTree.TupleToUserset
	(*UsersetTree_Difference)(nil),     // 20: openfga.v1.UsersetTree.Difference
	(*UsersetTree_Node)(nil),           // 21: openfga.v1.UsersetTree.Node
	(*structpb.Struct)(nil),            // 22: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),      // 23: google.protobuf.Timestamp
}
var file_openfga_v1_openfga_proto_depIdxs = []int32{
	1,  // 0: openfga.v1.User.object:type_name -> openfga.v1.Object
	3,  // 1: openfga.v1.User.userset:type_name -> openfga.v1.UsersetUser
	6,  // 2: openfga.v1.User.wildcard:type_name -> openfga.v1.TypedWildcard
	22, // 3: openfga.v1.RelationshipCondition.context:type_name -> google.protobuf.Struct
	4,  // 4: openfga.v1.TupleKey.condition:type_name -> openfga.v1.RelationshipCondition
	7,  // 5: openfga.v1.Tuple.key:type_name -> openfga.v1.TupleKey
	23, // 6: openfga.v1.Tuple.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 7: openfga.v1.TupleKeys.tuple_keys:type_name -> openfga.v1.TupleKey
	7,  // 8: openfga.v1.ContextualTupleKeys.tuple_keys:type_name -> openfga.v1.TupleKey
	21, // 9: openfga.v1.UsersetTree.root:type_name -> openfga.v1.UsersetTree.Node
	7,  // 10: openfga.v1.TupleChange.tuple_key:type_name -> openfga.v1.TupleKey
	0,  // 11: openfga.v1.TupleChange.operation:type_name -> openfga.v1.TupleOperation
	23, // 12: openfga.v1.TupleChange.timestamp:type_name -> google.protobuf.Timestamp
	23, // 13: openfga.v1.Store.created_at:type_name -> google.protobuf.Timestamp
	23, // 14: openfga.v1.Store.updated_at:type_name -> google.protobuf.Timestamp
	23, // 15: openfga.v1.Store.deleted_at:type_name -> google.protobuf.Timestamp
	17, // 16: openfga.v1.UsersetTree.Leaf.users:type_name -> openfga.v1.UsersetTree.Users
	18, // 17: openfga.v1.UsersetTree.Leaf.computed:type_name -> openfga.v1.UsersetTree.Computed
	19, // 18: openfga.v1.UsersetTree.Leaf.tuple_to_userset:type_name -> openfga.v1.UsersetTree.TupleToUserset
	21, // 19: openfga.v1.UsersetTree.Nodes.nodes:type_name -> openfga.v1.UsersetTree.Node
	18, // 20: openfga.v1.UsersetTree.TupleToUserset.computed:type_name -> openfga.v1.UsersetTree.Computed
	21, // 21: openfga.v1.UsersetTree.Difference.base:type_name -> openfga.v1.UsersetTree.Node
	21, // 22: openfga.v1.UsersetTree.Difference.subtract:type_name -> openfga.v1.UsersetTree.Node
	15, // 23: openfga.v1.UsersetTree.Node.leaf:type_name -> openfga.v1.UsersetTree.Leaf
	20, // 24: openfga.v1.UsersetTree.Node.difference:type_name -> openfga.v1.UsersetTree.Difference
	16, // 25: openfga.v1.UsersetTree.Node.union:type_name -> openfga.v1.UsersetTree.Nodes
	16, // 26: openfga.v1.UsersetTree.Node.intersection:type_name -> openfga.v1.UsersetTree.Nodes
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_openfga_v1_openfga_proto_init() }
func file_openfga_v1_openfga_proto_init() {
	if File_openfga_v1_openfga_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openfga_v1_openfga_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersetUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationshipCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleKeyWithoutCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedWildcard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextualTupleKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersetTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTypeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersetTree_Leaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersetTree_Nodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersetTree_Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersetTree_Computed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersetTree_TupleToUserset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersetTree_Difference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openfga_v1_openfga_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersetTree_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openfga_v1_openfga_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*User_Object)(nil),
		(*User_Userset)(nil),
		(*User_Wildcard)(nil),
	}
	file_openfga_v1_openfga_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*UsersetTree_Leaf_Users)(nil),
		(*UsersetTree_Leaf_Computed)(nil),
		(*UsersetTree_Leaf_TupleToUserset)(nil),
	}
	file_openfga_v1_openfga_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*UsersetTree_Node_Leaf)(nil),
		(*UsersetTree_Node_Difference)(nil),
		(*UsersetTree_Node_Union)(nil),
		(*UsersetTree_Node_Intersection)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openfga_v1_openfga_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openfga_v1_openfga_proto_goTypes,
		DependencyIndexes: file_openfga_v1_openfga_proto_depIdxs,
		EnumInfos:         file_openfga_v1_openfga_proto_enumTypes,
		MessageInfos:      file_openfga_v1_openfga_proto_msgTypes,
	}.Build()
	File_openfga_v1_openfga_proto = out.File
	file_openfga_v1_openfga_proto_rawDesc = nil
	file_openfga_v1_openfga_proto_goTypes = nil
	file_openfga_v1_openfga_proto_depIdxs = nil
}
