name: release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: read

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write # publish a new github release
      id-token: write # needed for keyless signing
    outputs:
      digest: ${{ steps.image.outputs.digest }}
      subjects-as-file: ${{ steps.hashes.outputs.handle }}
    steps:
      - name: Extract Version from Tag
        id: tag_name
        run: |
          echo "current_version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v3.5.2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: './go.mod'
          cache-dependency-path: './go.sum'
          check-latest: true

      - name: Login to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: sigstore/cosign-installer@9614fae9e5c5eddabb09f90a270fcb487c9f7149 # v3.3.0

      - uses: anchore/sbom-action/download-syft@5ecf649a417b8ae17dc8383dc32d46c03f2312df # v0.15.1

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@7ec5c2b0c6cdda6e8bbb49444bc797dd33d74dd8 # v5.0.0
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --config .goreleaser.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GORELEASER_GITHUB_TOKEN }}

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@dc67fad7001ef9e8e3c124cb7a64e16d0a63d864 # v3.4.2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: openfga/openfga
          short-description: ${{ github.event.repository.description }}

      - name: Generate binary hashes
        id: binary
        env:
          ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail
          hashes=$(echo $ARTIFACTS | jq --raw-output '[.[] | {name, "digest": (.extra.Digest // .extra.Checksum)}] | unique | .[] | select(.digest) | {digest} + {name} | join("  ") | sub("^sha256:";"")' | base64 -w0)
          echo $hashes > digests.txt

      - uses: slsa-framework/slsa-github-generator/actions/generator/generic/create-base64-subjects-from-file@07e64b653f10a80b6510f4568f685f8b7b9ea830 # v1.9.0
        id: hashes
        with:
          path: digests.txt

      - name: Image digest
        id: image
        env:
          ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail
          artifact=$(echo "$ARTIFACTS" | jq -r '[.[] | select (.type=="Docker Manifest")][0]')
          image=$(echo "$artifact" | jq -r '.path' | cut -d':' -f1)
          digest=$(echo "$artifact" | jq -r '.extra.Digest')
          echo "digest=$digest" >> "$GITHUB_OUTPUT"

  snyk:
    needs: [ goreleaser ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write # needed for uploading results to GitHub Code Scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v3.5.2

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@3e2680e8df93a24b52d119b1305fb7cedc60ceae # pin@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: openfga/openfga
          args: --file=Dockerfile

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@012739e5082ff0c22ca6d6ab32e07c36df03c4a4 # pin@v2
        with:
          sarif_file: snyk.sarif

  binary-provenance:
    needs: [ goreleaser ]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.

    # Note: this _must_ be referenced by tag. See: https://github.com/slsa-framework/slsa-verifier/issues/12
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects-as-file: "${{ needs.goreleaser.outputs.subjects-as-file }}"
      provenance-name: "openfga.intoto.jsonl"
      upload-assets: true # upload to a new release

  image-provenance:
    needs: [ goreleaser ]
    permissions:
      actions: read
      id-token: write
      packages: write

    # Note: this _must_ be referenced by tag. See: https://github.com/slsa-framework/slsa-verifier/issues/12
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
    with:
      image: openfga/openfga
      digest: ${{ needs.goreleaser.outputs.digest }}
    secrets:
      registry-username: ${{ secrets.DOCKERHUB_USERNAME }}
      registry-password: ${{ secrets.DOCKERHUB_TOKEN }}

  verification-with-slsa-verifier:
    needs: [ goreleaser, binary-provenance ]
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Install the verifier
        uses: slsa-framework/slsa-verifier/actions/installer@7e1e47d7d793930ab0082c15c2b971fdb53a3c95 # pin@v2.4.1

      - name: Download assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROVENANCE: "${{ needs.binary-provenance.outputs.provenance-name }}"
        run: |
          set -euo pipefail
          gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" \
            -p "$PROVENANCE" -p "*.tar.gz" -p "*.tar.gz.sbom"

      - name: Verify assets
        env:
          PROVENANCE: "${{ needs.binary-provenance.outputs.provenance-name }}"
        run: |
          slsa-verifier verify-artifact \
            --provenance-path "$PROVENANCE" \
            --source-uri "github.com/$GITHUB_REPOSITORY" \
            --source-tag "$GITHUB_REF_NAME" \
            *.tar.gz *.tar.gz.sbom

  verification-with-cosign:
    needs: [ goreleaser, image-provenance ]
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@9614fae9e5c5eddabb09f90a270fcb487c9f7149 # v3.3.0

      - name: Verify image
        env:
          IMAGE: openfga/openfga
          DIGEST: ${{ needs.goreleaser.outputs.digest }}
        run: |
          cosign verify-attestation \
             --type slsaprovenance \
             --certificate-oidc-issuer https://token.actions.githubusercontent.com \
             --certificate-identity-regexp '^https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/tags/v[0-9]+.[0-9]+.[0-9]+$' \
             $IMAGE@$DIGEST
