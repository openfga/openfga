name: release

on:
  push:
    tags:
      - "v*"
      - "!test*"

permissions:
  contents: read

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write # publish a new github release and container image
      id-token: write # needed for keyless signing
    outputs:
      digest: ${{ steps.image.outputs.digest }}
      subjects-as-file: ${{ steps.hashes.outputs.handle }}
    steps:
      - name: Extract Version from Tag
        id: tag_name
        run: |
          echo "current_version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v3.5.2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: './go.mod'
          cache-dependency-path: './go.sum'
          check-latest: true

      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - uses: anchore/sbom-action/download-syft@aa0e114b2e19480f157109b9922bda359bd98b90 # v0.20.8

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean --config .goreleaser.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GORELEASER_GITHUB_TOKEN }}

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@1b9a80c056b620d92cedb9d9b5a223409c68ddfa # v5.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: openfga/openfga
          short-description: ${{ github.event.repository.description }}

      - name: Generate binary hashes
        id: binary
        env:
          ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail
          hashes=$(echo "$ARTIFACTS" | jq --raw-output '[.[] | {name, "digest": (.extra.Digest // .extra.Checksum)}] | unique | .[] | select(.digest) | {digest} + {name} | join("  ") | sub("^sha256:";"")' | base64 -w0)
          echo "$hashes" > digests.txt

      - uses: slsa-framework/slsa-github-generator/actions/generator/generic/create-base64-subjects-from-file@fbeecf0c1e9cbb70c6828b0d311037a9e6cce717 # pin@v2.1.0
        id: hashes
        with:
          path: digests.txt

      - name: Image digest
        id: image
        env:
          ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail
          artifact=$(echo "$ARTIFACTS" | jq -r '[.[] | select (.type=="Docker Manifest")][0]')
          image=$(echo "$artifact" | jq -r '.path' | cut -d':' -f1)
          digest=$(echo "$artifact" | jq -r '.extra.Digest')
          echo "digest=$digest" >> "$GITHUB_OUTPUT"

  snyk:
    needs: [ goreleaser ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write # needed for uploading results to GitHub Code Scanning
    continue-on-error: true # allow the workflow to continue even if Snyk finds vulnerabilities
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v3.5.2

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@86b1cee1b8e110a78d528b3e1328a80e218111d2 # pin@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: openfga/openfga
          args: --file=Dockerfile

      # 1. Replace any "undefined" security severity values with 0. The undefined value is used in the case
      # of license-related findings, which do not indicate a security vulnerability.
      # See https://github.com/github/codeql-action/issues/2187 for more context.
      # 2. Add the `automationDetails.id` field to each run in the SARIF file because snyk does not do that
      # automatically. This is required to upload the SARIF file to GitHub Code Scanning.
      # See https://github.blog/changelog/2025-07-21-code-scanning-will-stop-combining-multiple-sarif-runs-uploaded-in-the-same-sarif-file/
      - name: Post-process snyk.sarif output
        run: |
          sed -i 's/"security-severity": "undefined"/"security-severity": "0"/g' snyk.sarif
          jq 'if .runs then .runs |= (to_entries | map(.value.automationDetails.id = "snyk-category-\(.key)" | .value)) else . end' snyk.sarif > snyk.categorized.sarif
          mv snyk.categorized.sarif snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@16140ae1a102900babc80a33c44059580f687047 # pin@v2
        with:
          sarif_file: snyk.sarif

  binary-provenance:
    needs: [ goreleaser ]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.

    # Note: this _must_ be referenced by tag. See: https://github.com/slsa-framework/slsa-verifier/issues/12
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects-as-file: "${{ needs.goreleaser.outputs.subjects-as-file }}"
      provenance-name: "openfga.intoto.jsonl"
      upload-assets: true # upload to a new release

  image-provenance:
    needs: [ goreleaser ]
    permissions:
      actions: read
      id-token: write
      packages: write

    # Note: this _must_ be referenced by tag. See: https://github.com/slsa-framework/slsa-verifier/issues/12
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: openfga/openfga
      digest: ${{ needs.goreleaser.outputs.digest }}
    secrets:
      registry-username: ${{ secrets.DOCKERHUB_USERNAME }}
      registry-password: ${{ secrets.DOCKERHUB_TOKEN }}

  verification-with-slsa-verifier:
    needs: [ goreleaser, binary-provenance ]
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Install the verifier
        uses: slsa-framework/slsa-verifier/actions/installer@ea584f4502babc6f60d9bc799dbbb13c1caa9ee6 # pin@v2.7.1

      - name: Download assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROVENANCE: "${{ needs.binary-provenance.outputs.provenance-name }}"
        run: |
          set -euo pipefail
          gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" \
            -p "$PROVENANCE" -p "*.tar.gz" -p "*.tar.gz.sbom.json"

      - name: Verify assets
        env:
          PROVENANCE: "${{ needs.binary-provenance.outputs.provenance-name }}"
        run: |
          slsa-verifier verify-artifact \
            --provenance-path "$PROVENANCE" \
            --source-uri "github.com/$GITHUB_REPOSITORY" \
            --source-tag "$GITHUB_REF_NAME" \
            *.tar.gz *.tar.gz.sbom.json

  verification-with-cosign:
    needs: [ goreleaser, image-provenance ]
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - name: Verify image
        env:
          IMAGE: openfga/openfga
          DIGEST: ${{ needs.goreleaser.outputs.digest }}
        run: |
          cosign verify-attestation \
             --type slsaprovenance \
             --certificate-oidc-issuer https://token.actions.githubusercontent.com \
             --certificate-identity-regexp '^https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/tags/v[0-9]+.[0-9]+.[0-9]+$' \
             $IMAGE@$DIGEST

  # homebrew bump happens automagically after a few hours, see https://github.com/Homebrew/homebrew-core/commits/master/Formula/o/openfga.rb
