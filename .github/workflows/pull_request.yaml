name: Pull Request
on:
  merge_group:
  pull_request:
    branches:
      - main
      - feat/abac

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v3.5.2
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: './go.mod'
          cache-dependency-path: './go.sum'
          check-latest: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@3a919529898de77ec3da873e3063ca4b10e7f5cc # v3.7.0
        with:
          version: latest
          args: -v -c .golangci.yaml

  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v3.5.2
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: './go.mod'
          cache-dependency-path: './go.sum'
          check-latest: true

      - id: go-cache-paths
        name: Get Go cache paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Unit Tests
        run: make unit-test

      - name: upload coverage to codecov
        uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3.1.4
        with:
          files: ./coverageunit.out
          verbose: true
          fail_ci_if_error: false

  govulncheck:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v3.5.2
      - name: Run govulncheck
        uses: golang/govulncheck-action@7da72f730e37eeaad891fcff0a532d27ed737cd4 # v1.0.1
        with:
          go-version-file: go.mod

  functional-tests:
      runs-on: ubuntu-latest
      timeout-minutes: 15
      steps:
        - name: Checkout code
          uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v3.5.2
        - name: Set up Go
          uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
          with:
            go-version-file: './go.mod'
            cache-dependency-path: './go.sum'
            check-latest: true

        - id: go-cache-paths
          name: Get Go cache paths
          run: |
            echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
            echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

        # build the openfga/openfga image for the functional tests
        - name: Build and push openfga/openfga:functionaltest
          uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
          with:
            file: Dockerfile
            push: false # don't publish the built container for functional tests
            load: true
            tags: "openfga/openfga:functionaltest"

        - name: Functional Tests
          run: make functional-test

  go-bench:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v3.5.2
        with:
          fetch-depth: 0 # to be able to retrieve the last commit in main

      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: './go.mod'
          cache-dependency-path: './go.sum'
          check-latest: true

      # Run benchmark with `go test -bench` and stores the output to a file
      - name: Run benchmark
        run: |
          set -o pipefail
          make bench | tee ${{ github.sha }}_bench_output.txt

      - name: Get CPU information
        uses: kenchan0130/actions-system-info@19ac84a24678e27ef7e91016765c221f97b1dc28 # v1
        id: system-info

      - name: Get Main branch SHA
        id: get-main-branch-sha
        run: |
          SHA=$(git rev-parse origin/main)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Get benchmark JSON from main branch
        id: cache
        uses: actions/cache/restore@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: ./cache/benchmark-data.json
          key: ${{ steps.get-main-branch-sha.outputs.sha }}-${{ runner.os }}-${{ steps.system-info.outputs.cpu-model }}-go-benchmark

      - name: Compare benchmarks with Main
        uses: benchmark-action/github-action-benchmark@70405016b032d44f409e4b1b451c40215cbe2393 # v1.18.0
        if: steps.cache.outputs.cache-hit == 'true'
        with:
          # What benchmark tool the output.txt came from
          tool: 'go'
          # Where the output from the benchmark tool is stored
          output-file-path: ${{ github.sha }}_bench_output.txt
          # Where the benchmarks in main are (to compare)
          external-data-json-path: ./cache/benchmark-data.json
          # Do not save the data
          save-data-file: false
          # Workflow will fail when an alert happens
          fail-on-alert: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Enable Job Summary for PRs
          summary-always: true

      - name: Run benchmarks but don't compare to Main branch
        uses: benchmark-action/github-action-benchmark@70405016b032d44f409e4b1b451c40215cbe2393 # v1.18.0
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          # What benchmark tool the output.txt came from
          tool: 'go'
          # Where the output from the benchmark tool is stored
          output-file-path: ${{ github.sha }}_bench_output.txt
          # Write benchmarks to this file, do not publish to GitHub Pages
          save-data-file: false
          external-data-json-path: ./cache/benchmark-data.json
          # Enable Job Summary for PRs
          summary-always: true
