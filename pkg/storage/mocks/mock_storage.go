// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/openfga/openfga/pkg/storage"
	openfgav1 "go.buf.build/openfga/go/openfga/api/openfga/v1"
)

// MockTupleBackend is a mock of TupleBackend interface.
type MockTupleBackend struct {
	ctrl     *gomock.Controller
	recorder *MockTupleBackendMockRecorder
}

// MockTupleBackendMockRecorder is the mock recorder for MockTupleBackend.
type MockTupleBackendMockRecorder struct {
	mock *MockTupleBackend
}

// NewMockTupleBackend creates a new mock instance.
func NewMockTupleBackend(ctrl *gomock.Controller) *MockTupleBackend {
	mock := &MockTupleBackend{ctrl: ctrl}
	mock.recorder = &MockTupleBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTupleBackend) EXPECT() *MockTupleBackendMockRecorder {
	return m.recorder
}

// ListObjectsByType mocks base method.
func (m *MockTupleBackend) ListObjectsByType(ctx context.Context, store, objectType string) (storage.ObjectIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsByType", ctx, store, objectType)
	ret0, _ := ret[0].(storage.ObjectIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsByType indicates an expected call of ListObjectsByType.
func (mr *MockTupleBackendMockRecorder) ListObjectsByType(ctx, store, objectType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsByType", reflect.TypeOf((*MockTupleBackend)(nil).ListObjectsByType), ctx, store, objectType)
}

// MaxTuplesPerWrite mocks base method.
func (m *MockTupleBackend) MaxTuplesPerWrite() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxTuplesPerWrite")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxTuplesPerWrite indicates an expected call of MaxTuplesPerWrite.
func (mr *MockTupleBackendMockRecorder) MaxTuplesPerWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTuplesPerWrite", reflect.TypeOf((*MockTupleBackend)(nil).MaxTuplesPerWrite))
}

// Read mocks base method.
func (m *MockTupleBackend) Read(arg0 context.Context, arg1 string, arg2 *openfgav1.TupleKey) (storage.TupleIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1, arg2)
	ret0, _ := ret[0].(storage.TupleIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTupleBackendMockRecorder) Read(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTupleBackend)(nil).Read), arg0, arg1, arg2)
}

// ReadPage mocks base method.
func (m *MockTupleBackend) ReadPage(ctx context.Context, store string, tk *openfgav1.TupleKey, opts storage.PaginationOptions) ([]*openfgav1.Tuple, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPage", ctx, store, tk, opts)
	ret0, _ := ret[0].([]*openfgav1.Tuple)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadPage indicates an expected call of ReadPage.
func (mr *MockTupleBackendMockRecorder) ReadPage(ctx, store, tk, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPage", reflect.TypeOf((*MockTupleBackend)(nil).ReadPage), ctx, store, tk, opts)
}

// ReadStartingWithUser mocks base method.
func (m *MockTupleBackend) ReadStartingWithUser(ctx context.Context, store string, filter storage.ReadStartingWithUserFilter) (storage.TupleIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStartingWithUser", ctx, store, filter)
	ret0, _ := ret[0].(storage.TupleIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStartingWithUser indicates an expected call of ReadStartingWithUser.
func (mr *MockTupleBackendMockRecorder) ReadStartingWithUser(ctx, store, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStartingWithUser", reflect.TypeOf((*MockTupleBackend)(nil).ReadStartingWithUser), ctx, store, filter)
}

// ReadUserTuple mocks base method.
func (m *MockTupleBackend) ReadUserTuple(ctx context.Context, store string, tk *openfgav1.TupleKey) (*openfgav1.Tuple, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserTuple", ctx, store, tk)
	ret0, _ := ret[0].(*openfgav1.Tuple)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserTuple indicates an expected call of ReadUserTuple.
func (mr *MockTupleBackendMockRecorder) ReadUserTuple(ctx, store, tk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserTuple", reflect.TypeOf((*MockTupleBackend)(nil).ReadUserTuple), ctx, store, tk)
}

// ReadUsersetTuples mocks base method.
func (m *MockTupleBackend) ReadUsersetTuples(ctx context.Context, store string, filter storage.ReadUsersetTuplesFilter) (storage.TupleIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUsersetTuples", ctx, store, filter)
	ret0, _ := ret[0].(storage.TupleIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUsersetTuples indicates an expected call of ReadUsersetTuples.
func (mr *MockTupleBackendMockRecorder) ReadUsersetTuples(ctx, store, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUsersetTuples", reflect.TypeOf((*MockTupleBackend)(nil).ReadUsersetTuples), ctx, store, filter)
}

// Write mocks base method.
func (m *MockTupleBackend) Write(ctx context.Context, store string, d storage.Deletes, w storage.Writes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, store, d, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockTupleBackendMockRecorder) Write(ctx, store, d, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTupleBackend)(nil).Write), ctx, store, d, w)
}

// MockRelationshipTupleReader is a mock of RelationshipTupleReader interface.
type MockRelationshipTupleReader struct {
	ctrl     *gomock.Controller
	recorder *MockRelationshipTupleReaderMockRecorder
}

// MockRelationshipTupleReaderMockRecorder is the mock recorder for MockRelationshipTupleReader.
type MockRelationshipTupleReaderMockRecorder struct {
	mock *MockRelationshipTupleReader
}

// NewMockRelationshipTupleReader creates a new mock instance.
func NewMockRelationshipTupleReader(ctrl *gomock.Controller) *MockRelationshipTupleReader {
	mock := &MockRelationshipTupleReader{ctrl: ctrl}
	mock.recorder = &MockRelationshipTupleReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationshipTupleReader) EXPECT() *MockRelationshipTupleReaderMockRecorder {
	return m.recorder
}

// ListObjectsByType mocks base method.
func (m *MockRelationshipTupleReader) ListObjectsByType(ctx context.Context, store, objectType string) (storage.ObjectIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsByType", ctx, store, objectType)
	ret0, _ := ret[0].(storage.ObjectIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsByType indicates an expected call of ListObjectsByType.
func (mr *MockRelationshipTupleReaderMockRecorder) ListObjectsByType(ctx, store, objectType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsByType", reflect.TypeOf((*MockRelationshipTupleReader)(nil).ListObjectsByType), ctx, store, objectType)
}

// Read mocks base method.
func (m *MockRelationshipTupleReader) Read(arg0 context.Context, arg1 string, arg2 *openfgav1.TupleKey) (storage.TupleIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1, arg2)
	ret0, _ := ret[0].(storage.TupleIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRelationshipTupleReaderMockRecorder) Read(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRelationshipTupleReader)(nil).Read), arg0, arg1, arg2)
}

// ReadPage mocks base method.
func (m *MockRelationshipTupleReader) ReadPage(ctx context.Context, store string, tk *openfgav1.TupleKey, opts storage.PaginationOptions) ([]*openfgav1.Tuple, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPage", ctx, store, tk, opts)
	ret0, _ := ret[0].([]*openfgav1.Tuple)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadPage indicates an expected call of ReadPage.
func (mr *MockRelationshipTupleReaderMockRecorder) ReadPage(ctx, store, tk, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPage", reflect.TypeOf((*MockRelationshipTupleReader)(nil).ReadPage), ctx, store, tk, opts)
}

// ReadStartingWithUser mocks base method.
func (m *MockRelationshipTupleReader) ReadStartingWithUser(ctx context.Context, store string, filter storage.ReadStartingWithUserFilter) (storage.TupleIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStartingWithUser", ctx, store, filter)
	ret0, _ := ret[0].(storage.TupleIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStartingWithUser indicates an expected call of ReadStartingWithUser.
func (mr *MockRelationshipTupleReaderMockRecorder) ReadStartingWithUser(ctx, store, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStartingWithUser", reflect.TypeOf((*MockRelationshipTupleReader)(nil).ReadStartingWithUser), ctx, store, filter)
}

// ReadUserTuple mocks base method.
func (m *MockRelationshipTupleReader) ReadUserTuple(ctx context.Context, store string, tk *openfgav1.TupleKey) (*openfgav1.Tuple, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserTuple", ctx, store, tk)
	ret0, _ := ret[0].(*openfgav1.Tuple)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserTuple indicates an expected call of ReadUserTuple.
func (mr *MockRelationshipTupleReaderMockRecorder) ReadUserTuple(ctx, store, tk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserTuple", reflect.TypeOf((*MockRelationshipTupleReader)(nil).ReadUserTuple), ctx, store, tk)
}

// ReadUsersetTuples mocks base method.
func (m *MockRelationshipTupleReader) ReadUsersetTuples(ctx context.Context, store string, filter storage.ReadUsersetTuplesFilter) (storage.TupleIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUsersetTuples", ctx, store, filter)
	ret0, _ := ret[0].(storage.TupleIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUsersetTuples indicates an expected call of ReadUsersetTuples.
func (mr *MockRelationshipTupleReaderMockRecorder) ReadUsersetTuples(ctx, store, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUsersetTuples", reflect.TypeOf((*MockRelationshipTupleReader)(nil).ReadUsersetTuples), ctx, store, filter)
}

// MockRelationshipTupleWriter is a mock of RelationshipTupleWriter interface.
type MockRelationshipTupleWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRelationshipTupleWriterMockRecorder
}

// MockRelationshipTupleWriterMockRecorder is the mock recorder for MockRelationshipTupleWriter.
type MockRelationshipTupleWriterMockRecorder struct {
	mock *MockRelationshipTupleWriter
}

// NewMockRelationshipTupleWriter creates a new mock instance.
func NewMockRelationshipTupleWriter(ctrl *gomock.Controller) *MockRelationshipTupleWriter {
	mock := &MockRelationshipTupleWriter{ctrl: ctrl}
	mock.recorder = &MockRelationshipTupleWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationshipTupleWriter) EXPECT() *MockRelationshipTupleWriterMockRecorder {
	return m.recorder
}

// MaxTuplesPerWrite mocks base method.
func (m *MockRelationshipTupleWriter) MaxTuplesPerWrite() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxTuplesPerWrite")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxTuplesPerWrite indicates an expected call of MaxTuplesPerWrite.
func (mr *MockRelationshipTupleWriterMockRecorder) MaxTuplesPerWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTuplesPerWrite", reflect.TypeOf((*MockRelationshipTupleWriter)(nil).MaxTuplesPerWrite))
}

// Write mocks base method.
func (m *MockRelationshipTupleWriter) Write(ctx context.Context, store string, d storage.Deletes, w storage.Writes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, store, d, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockRelationshipTupleWriterMockRecorder) Write(ctx, store, d, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRelationshipTupleWriter)(nil).Write), ctx, store, d, w)
}

// MockAuthorizationModelReadBackend is a mock of AuthorizationModelReadBackend interface.
type MockAuthorizationModelReadBackend struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationModelReadBackendMockRecorder
}

// MockAuthorizationModelReadBackendMockRecorder is the mock recorder for MockAuthorizationModelReadBackend.
type MockAuthorizationModelReadBackendMockRecorder struct {
	mock *MockAuthorizationModelReadBackend
}

// NewMockAuthorizationModelReadBackend creates a new mock instance.
func NewMockAuthorizationModelReadBackend(ctrl *gomock.Controller) *MockAuthorizationModelReadBackend {
	mock := &MockAuthorizationModelReadBackend{ctrl: ctrl}
	mock.recorder = &MockAuthorizationModelReadBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationModelReadBackend) EXPECT() *MockAuthorizationModelReadBackendMockRecorder {
	return m.recorder
}

// FindLatestAuthorizationModelID mocks base method.
func (m *MockAuthorizationModelReadBackend) FindLatestAuthorizationModelID(ctx context.Context, store string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestAuthorizationModelID", ctx, store)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestAuthorizationModelID indicates an expected call of FindLatestAuthorizationModelID.
func (mr *MockAuthorizationModelReadBackendMockRecorder) FindLatestAuthorizationModelID(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestAuthorizationModelID", reflect.TypeOf((*MockAuthorizationModelReadBackend)(nil).FindLatestAuthorizationModelID), ctx, store)
}

// ReadAuthorizationModel mocks base method.
func (m *MockAuthorizationModelReadBackend) ReadAuthorizationModel(ctx context.Context, store, id string) (*openfgav1.AuthorizationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthorizationModel", ctx, store, id)
	ret0, _ := ret[0].(*openfgav1.AuthorizationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAuthorizationModel indicates an expected call of ReadAuthorizationModel.
func (mr *MockAuthorizationModelReadBackendMockRecorder) ReadAuthorizationModel(ctx, store, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthorizationModel", reflect.TypeOf((*MockAuthorizationModelReadBackend)(nil).ReadAuthorizationModel), ctx, store, id)
}

// ReadAuthorizationModels mocks base method.
func (m *MockAuthorizationModelReadBackend) ReadAuthorizationModels(ctx context.Context, store string, options storage.PaginationOptions) ([]*openfgav1.AuthorizationModel, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthorizationModels", ctx, store, options)
	ret0, _ := ret[0].([]*openfgav1.AuthorizationModel)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadAuthorizationModels indicates an expected call of ReadAuthorizationModels.
func (mr *MockAuthorizationModelReadBackendMockRecorder) ReadAuthorizationModels(ctx, store, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthorizationModels", reflect.TypeOf((*MockAuthorizationModelReadBackend)(nil).ReadAuthorizationModels), ctx, store, options)
}

// MockTypeDefinitionReadBackend is a mock of TypeDefinitionReadBackend interface.
type MockTypeDefinitionReadBackend struct {
	ctrl     *gomock.Controller
	recorder *MockTypeDefinitionReadBackendMockRecorder
}

// MockTypeDefinitionReadBackendMockRecorder is the mock recorder for MockTypeDefinitionReadBackend.
type MockTypeDefinitionReadBackendMockRecorder struct {
	mock *MockTypeDefinitionReadBackend
}

// NewMockTypeDefinitionReadBackend creates a new mock instance.
func NewMockTypeDefinitionReadBackend(ctrl *gomock.Controller) *MockTypeDefinitionReadBackend {
	mock := &MockTypeDefinitionReadBackend{ctrl: ctrl}
	mock.recorder = &MockTypeDefinitionReadBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypeDefinitionReadBackend) EXPECT() *MockTypeDefinitionReadBackendMockRecorder {
	return m.recorder
}

// ReadTypeDefinition mocks base method.
func (m *MockTypeDefinitionReadBackend) ReadTypeDefinition(ctx context.Context, store, id, objectType string) (*openfgav1.TypeDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTypeDefinition", ctx, store, id, objectType)
	ret0, _ := ret[0].(*openfgav1.TypeDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTypeDefinition indicates an expected call of ReadTypeDefinition.
func (mr *MockTypeDefinitionReadBackendMockRecorder) ReadTypeDefinition(ctx, store, id, objectType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTypeDefinition", reflect.TypeOf((*MockTypeDefinitionReadBackend)(nil).ReadTypeDefinition), ctx, store, id, objectType)
}

// MockTypeDefinitionWriteBackend is a mock of TypeDefinitionWriteBackend interface.
type MockTypeDefinitionWriteBackend struct {
	ctrl     *gomock.Controller
	recorder *MockTypeDefinitionWriteBackendMockRecorder
}

// MockTypeDefinitionWriteBackendMockRecorder is the mock recorder for MockTypeDefinitionWriteBackend.
type MockTypeDefinitionWriteBackendMockRecorder struct {
	mock *MockTypeDefinitionWriteBackend
}

// NewMockTypeDefinitionWriteBackend creates a new mock instance.
func NewMockTypeDefinitionWriteBackend(ctrl *gomock.Controller) *MockTypeDefinitionWriteBackend {
	mock := &MockTypeDefinitionWriteBackend{ctrl: ctrl}
	mock.recorder = &MockTypeDefinitionWriteBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypeDefinitionWriteBackend) EXPECT() *MockTypeDefinitionWriteBackendMockRecorder {
	return m.recorder
}

// MaxTypesPerAuthorizationModel mocks base method.
func (m *MockTypeDefinitionWriteBackend) MaxTypesPerAuthorizationModel() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxTypesPerAuthorizationModel")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxTypesPerAuthorizationModel indicates an expected call of MaxTypesPerAuthorizationModel.
func (mr *MockTypeDefinitionWriteBackendMockRecorder) MaxTypesPerAuthorizationModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTypesPerAuthorizationModel", reflect.TypeOf((*MockTypeDefinitionWriteBackend)(nil).MaxTypesPerAuthorizationModel))
}

// WriteAuthorizationModel mocks base method.
func (m *MockTypeDefinitionWriteBackend) WriteAuthorizationModel(ctx context.Context, store string, model *openfgav1.AuthorizationModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAuthorizationModel", ctx, store, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAuthorizationModel indicates an expected call of WriteAuthorizationModel.
func (mr *MockTypeDefinitionWriteBackendMockRecorder) WriteAuthorizationModel(ctx, store, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAuthorizationModel", reflect.TypeOf((*MockTypeDefinitionWriteBackend)(nil).WriteAuthorizationModel), ctx, store, model)
}

// MockAuthorizationModelBackend is a mock of AuthorizationModelBackend interface.
type MockAuthorizationModelBackend struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationModelBackendMockRecorder
}

// MockAuthorizationModelBackendMockRecorder is the mock recorder for MockAuthorizationModelBackend.
type MockAuthorizationModelBackendMockRecorder struct {
	mock *MockAuthorizationModelBackend
}

// NewMockAuthorizationModelBackend creates a new mock instance.
func NewMockAuthorizationModelBackend(ctrl *gomock.Controller) *MockAuthorizationModelBackend {
	mock := &MockAuthorizationModelBackend{ctrl: ctrl}
	mock.recorder = &MockAuthorizationModelBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationModelBackend) EXPECT() *MockAuthorizationModelBackendMockRecorder {
	return m.recorder
}

// FindLatestAuthorizationModelID mocks base method.
func (m *MockAuthorizationModelBackend) FindLatestAuthorizationModelID(ctx context.Context, store string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestAuthorizationModelID", ctx, store)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestAuthorizationModelID indicates an expected call of FindLatestAuthorizationModelID.
func (mr *MockAuthorizationModelBackendMockRecorder) FindLatestAuthorizationModelID(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestAuthorizationModelID", reflect.TypeOf((*MockAuthorizationModelBackend)(nil).FindLatestAuthorizationModelID), ctx, store)
}

// MaxTypesPerAuthorizationModel mocks base method.
func (m *MockAuthorizationModelBackend) MaxTypesPerAuthorizationModel() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxTypesPerAuthorizationModel")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxTypesPerAuthorizationModel indicates an expected call of MaxTypesPerAuthorizationModel.
func (mr *MockAuthorizationModelBackendMockRecorder) MaxTypesPerAuthorizationModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTypesPerAuthorizationModel", reflect.TypeOf((*MockAuthorizationModelBackend)(nil).MaxTypesPerAuthorizationModel))
}

// ReadAuthorizationModel mocks base method.
func (m *MockAuthorizationModelBackend) ReadAuthorizationModel(ctx context.Context, store, id string) (*openfgav1.AuthorizationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthorizationModel", ctx, store, id)
	ret0, _ := ret[0].(*openfgav1.AuthorizationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAuthorizationModel indicates an expected call of ReadAuthorizationModel.
func (mr *MockAuthorizationModelBackendMockRecorder) ReadAuthorizationModel(ctx, store, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthorizationModel", reflect.TypeOf((*MockAuthorizationModelBackend)(nil).ReadAuthorizationModel), ctx, store, id)
}

// ReadAuthorizationModels mocks base method.
func (m *MockAuthorizationModelBackend) ReadAuthorizationModels(ctx context.Context, store string, options storage.PaginationOptions) ([]*openfgav1.AuthorizationModel, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthorizationModels", ctx, store, options)
	ret0, _ := ret[0].([]*openfgav1.AuthorizationModel)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadAuthorizationModels indicates an expected call of ReadAuthorizationModels.
func (mr *MockAuthorizationModelBackendMockRecorder) ReadAuthorizationModels(ctx, store, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthorizationModels", reflect.TypeOf((*MockAuthorizationModelBackend)(nil).ReadAuthorizationModels), ctx, store, options)
}

// ReadTypeDefinition mocks base method.
func (m *MockAuthorizationModelBackend) ReadTypeDefinition(ctx context.Context, store, id, objectType string) (*openfgav1.TypeDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTypeDefinition", ctx, store, id, objectType)
	ret0, _ := ret[0].(*openfgav1.TypeDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTypeDefinition indicates an expected call of ReadTypeDefinition.
func (mr *MockAuthorizationModelBackendMockRecorder) ReadTypeDefinition(ctx, store, id, objectType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTypeDefinition", reflect.TypeOf((*MockAuthorizationModelBackend)(nil).ReadTypeDefinition), ctx, store, id, objectType)
}

// WriteAuthorizationModel mocks base method.
func (m *MockAuthorizationModelBackend) WriteAuthorizationModel(ctx context.Context, store string, model *openfgav1.AuthorizationModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAuthorizationModel", ctx, store, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAuthorizationModel indicates an expected call of WriteAuthorizationModel.
func (mr *MockAuthorizationModelBackendMockRecorder) WriteAuthorizationModel(ctx, store, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAuthorizationModel", reflect.TypeOf((*MockAuthorizationModelBackend)(nil).WriteAuthorizationModel), ctx, store, model)
}

// MockStoresBackend is a mock of StoresBackend interface.
type MockStoresBackend struct {
	ctrl     *gomock.Controller
	recorder *MockStoresBackendMockRecorder
}

// MockStoresBackendMockRecorder is the mock recorder for MockStoresBackend.
type MockStoresBackendMockRecorder struct {
	mock *MockStoresBackend
}

// NewMockStoresBackend creates a new mock instance.
func NewMockStoresBackend(ctrl *gomock.Controller) *MockStoresBackend {
	mock := &MockStoresBackend{ctrl: ctrl}
	mock.recorder = &MockStoresBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoresBackend) EXPECT() *MockStoresBackendMockRecorder {
	return m.recorder
}

// CreateStore mocks base method.
func (m *MockStoresBackend) CreateStore(ctx context.Context, store *openfgav1.Store) (*openfgav1.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStore", ctx, store)
	ret0, _ := ret[0].(*openfgav1.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStore indicates an expected call of CreateStore.
func (mr *MockStoresBackendMockRecorder) CreateStore(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStore", reflect.TypeOf((*MockStoresBackend)(nil).CreateStore), ctx, store)
}

// DeleteStore mocks base method.
func (m *MockStoresBackend) DeleteStore(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStore", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStore indicates an expected call of DeleteStore.
func (mr *MockStoresBackendMockRecorder) DeleteStore(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStore", reflect.TypeOf((*MockStoresBackend)(nil).DeleteStore), ctx, id)
}

// GetStore mocks base method.
func (m *MockStoresBackend) GetStore(ctx context.Context, id string) (*openfgav1.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore", ctx, id)
	ret0, _ := ret[0].(*openfgav1.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStore indicates an expected call of GetStore.
func (mr *MockStoresBackendMockRecorder) GetStore(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockStoresBackend)(nil).GetStore), ctx, id)
}

// ListStores mocks base method.
func (m *MockStoresBackend) ListStores(ctx context.Context, paginationOptions storage.PaginationOptions) ([]*openfgav1.Store, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStores", ctx, paginationOptions)
	ret0, _ := ret[0].([]*openfgav1.Store)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStores indicates an expected call of ListStores.
func (mr *MockStoresBackendMockRecorder) ListStores(ctx, paginationOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStores", reflect.TypeOf((*MockStoresBackend)(nil).ListStores), ctx, paginationOptions)
}

// MockAssertionsBackend is a mock of AssertionsBackend interface.
type MockAssertionsBackend struct {
	ctrl     *gomock.Controller
	recorder *MockAssertionsBackendMockRecorder
}

// MockAssertionsBackendMockRecorder is the mock recorder for MockAssertionsBackend.
type MockAssertionsBackendMockRecorder struct {
	mock *MockAssertionsBackend
}

// NewMockAssertionsBackend creates a new mock instance.
func NewMockAssertionsBackend(ctrl *gomock.Controller) *MockAssertionsBackend {
	mock := &MockAssertionsBackend{ctrl: ctrl}
	mock.recorder = &MockAssertionsBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssertionsBackend) EXPECT() *MockAssertionsBackendMockRecorder {
	return m.recorder
}

// ReadAssertions mocks base method.
func (m *MockAssertionsBackend) ReadAssertions(ctx context.Context, store, modelID string) ([]*openfgav1.Assertion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAssertions", ctx, store, modelID)
	ret0, _ := ret[0].([]*openfgav1.Assertion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAssertions indicates an expected call of ReadAssertions.
func (mr *MockAssertionsBackendMockRecorder) ReadAssertions(ctx, store, modelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAssertions", reflect.TypeOf((*MockAssertionsBackend)(nil).ReadAssertions), ctx, store, modelID)
}

// WriteAssertions mocks base method.
func (m *MockAssertionsBackend) WriteAssertions(ctx context.Context, store, modelID string, assertions []*openfgav1.Assertion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAssertions", ctx, store, modelID, assertions)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAssertions indicates an expected call of WriteAssertions.
func (mr *MockAssertionsBackendMockRecorder) WriteAssertions(ctx, store, modelID, assertions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAssertions", reflect.TypeOf((*MockAssertionsBackend)(nil).WriteAssertions), ctx, store, modelID, assertions)
}

// MockChangelogBackend is a mock of ChangelogBackend interface.
type MockChangelogBackend struct {
	ctrl     *gomock.Controller
	recorder *MockChangelogBackendMockRecorder
}

// MockChangelogBackendMockRecorder is the mock recorder for MockChangelogBackend.
type MockChangelogBackendMockRecorder struct {
	mock *MockChangelogBackend
}

// NewMockChangelogBackend creates a new mock instance.
func NewMockChangelogBackend(ctrl *gomock.Controller) *MockChangelogBackend {
	mock := &MockChangelogBackend{ctrl: ctrl}
	mock.recorder = &MockChangelogBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangelogBackend) EXPECT() *MockChangelogBackendMockRecorder {
	return m.recorder
}

// ReadChanges mocks base method.
func (m *MockChangelogBackend) ReadChanges(ctx context.Context, store, objectType string, paginationOptions storage.PaginationOptions, horizonOffset time.Duration) ([]*openfgav1.TupleChange, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadChanges", ctx, store, objectType, paginationOptions, horizonOffset)
	ret0, _ := ret[0].([]*openfgav1.TupleChange)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadChanges indicates an expected call of ReadChanges.
func (mr *MockChangelogBackendMockRecorder) ReadChanges(ctx, store, objectType, paginationOptions, horizonOffset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadChanges", reflect.TypeOf((*MockChangelogBackend)(nil).ReadChanges), ctx, store, objectType, paginationOptions, horizonOffset)
}

// MockOpenFGADatastore is a mock of OpenFGADatastore interface.
type MockOpenFGADatastore struct {
	ctrl     *gomock.Controller
	recorder *MockOpenFGADatastoreMockRecorder
}

// MockOpenFGADatastoreMockRecorder is the mock recorder for MockOpenFGADatastore.
type MockOpenFGADatastoreMockRecorder struct {
	mock *MockOpenFGADatastore
}

// NewMockOpenFGADatastore creates a new mock instance.
func NewMockOpenFGADatastore(ctrl *gomock.Controller) *MockOpenFGADatastore {
	mock := &MockOpenFGADatastore{ctrl: ctrl}
	mock.recorder = &MockOpenFGADatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenFGADatastore) EXPECT() *MockOpenFGADatastoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOpenFGADatastore) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockOpenFGADatastoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOpenFGADatastore)(nil).Close))
}

// CreateStore mocks base method.
func (m *MockOpenFGADatastore) CreateStore(ctx context.Context, store *openfgav1.Store) (*openfgav1.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStore", ctx, store)
	ret0, _ := ret[0].(*openfgav1.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStore indicates an expected call of CreateStore.
func (mr *MockOpenFGADatastoreMockRecorder) CreateStore(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStore", reflect.TypeOf((*MockOpenFGADatastore)(nil).CreateStore), ctx, store)
}

// DeleteStore mocks base method.
func (m *MockOpenFGADatastore) DeleteStore(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStore", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStore indicates an expected call of DeleteStore.
func (mr *MockOpenFGADatastoreMockRecorder) DeleteStore(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStore", reflect.TypeOf((*MockOpenFGADatastore)(nil).DeleteStore), ctx, id)
}

// FindLatestAuthorizationModelID mocks base method.
func (m *MockOpenFGADatastore) FindLatestAuthorizationModelID(ctx context.Context, store string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestAuthorizationModelID", ctx, store)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestAuthorizationModelID indicates an expected call of FindLatestAuthorizationModelID.
func (mr *MockOpenFGADatastoreMockRecorder) FindLatestAuthorizationModelID(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestAuthorizationModelID", reflect.TypeOf((*MockOpenFGADatastore)(nil).FindLatestAuthorizationModelID), ctx, store)
}

// GetStore mocks base method.
func (m *MockOpenFGADatastore) GetStore(ctx context.Context, id string) (*openfgav1.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore", ctx, id)
	ret0, _ := ret[0].(*openfgav1.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStore indicates an expected call of GetStore.
func (mr *MockOpenFGADatastoreMockRecorder) GetStore(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockOpenFGADatastore)(nil).GetStore), ctx, id)
}

// IsReady mocks base method.
func (m *MockOpenFGADatastore) IsReady(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockOpenFGADatastoreMockRecorder) IsReady(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockOpenFGADatastore)(nil).IsReady), ctx)
}

// ListObjectsByType mocks base method.
func (m *MockOpenFGADatastore) ListObjectsByType(ctx context.Context, store, objectType string) (storage.ObjectIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsByType", ctx, store, objectType)
	ret0, _ := ret[0].(storage.ObjectIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsByType indicates an expected call of ListObjectsByType.
func (mr *MockOpenFGADatastoreMockRecorder) ListObjectsByType(ctx, store, objectType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsByType", reflect.TypeOf((*MockOpenFGADatastore)(nil).ListObjectsByType), ctx, store, objectType)
}

// ListStores mocks base method.
func (m *MockOpenFGADatastore) ListStores(ctx context.Context, paginationOptions storage.PaginationOptions) ([]*openfgav1.Store, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStores", ctx, paginationOptions)
	ret0, _ := ret[0].([]*openfgav1.Store)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStores indicates an expected call of ListStores.
func (mr *MockOpenFGADatastoreMockRecorder) ListStores(ctx, paginationOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStores", reflect.TypeOf((*MockOpenFGADatastore)(nil).ListStores), ctx, paginationOptions)
}

// MaxTuplesPerWrite mocks base method.
func (m *MockOpenFGADatastore) MaxTuplesPerWrite() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxTuplesPerWrite")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxTuplesPerWrite indicates an expected call of MaxTuplesPerWrite.
func (mr *MockOpenFGADatastoreMockRecorder) MaxTuplesPerWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTuplesPerWrite", reflect.TypeOf((*MockOpenFGADatastore)(nil).MaxTuplesPerWrite))
}

// MaxTypesPerAuthorizationModel mocks base method.
func (m *MockOpenFGADatastore) MaxTypesPerAuthorizationModel() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxTypesPerAuthorizationModel")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxTypesPerAuthorizationModel indicates an expected call of MaxTypesPerAuthorizationModel.
func (mr *MockOpenFGADatastoreMockRecorder) MaxTypesPerAuthorizationModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTypesPerAuthorizationModel", reflect.TypeOf((*MockOpenFGADatastore)(nil).MaxTypesPerAuthorizationModel))
}

// Read mocks base method.
func (m *MockOpenFGADatastore) Read(arg0 context.Context, arg1 string, arg2 *openfgav1.TupleKey) (storage.TupleIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1, arg2)
	ret0, _ := ret[0].(storage.TupleIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockOpenFGADatastoreMockRecorder) Read(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockOpenFGADatastore)(nil).Read), arg0, arg1, arg2)
}

// ReadAssertions mocks base method.
func (m *MockOpenFGADatastore) ReadAssertions(ctx context.Context, store, modelID string) ([]*openfgav1.Assertion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAssertions", ctx, store, modelID)
	ret0, _ := ret[0].([]*openfgav1.Assertion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAssertions indicates an expected call of ReadAssertions.
func (mr *MockOpenFGADatastoreMockRecorder) ReadAssertions(ctx, store, modelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAssertions", reflect.TypeOf((*MockOpenFGADatastore)(nil).ReadAssertions), ctx, store, modelID)
}

// ReadAuthorizationModel mocks base method.
func (m *MockOpenFGADatastore) ReadAuthorizationModel(ctx context.Context, store, id string) (*openfgav1.AuthorizationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthorizationModel", ctx, store, id)
	ret0, _ := ret[0].(*openfgav1.AuthorizationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAuthorizationModel indicates an expected call of ReadAuthorizationModel.
func (mr *MockOpenFGADatastoreMockRecorder) ReadAuthorizationModel(ctx, store, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthorizationModel", reflect.TypeOf((*MockOpenFGADatastore)(nil).ReadAuthorizationModel), ctx, store, id)
}

// ReadAuthorizationModels mocks base method.
func (m *MockOpenFGADatastore) ReadAuthorizationModels(ctx context.Context, store string, options storage.PaginationOptions) ([]*openfgav1.AuthorizationModel, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthorizationModels", ctx, store, options)
	ret0, _ := ret[0].([]*openfgav1.AuthorizationModel)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadAuthorizationModels indicates an expected call of ReadAuthorizationModels.
func (mr *MockOpenFGADatastoreMockRecorder) ReadAuthorizationModels(ctx, store, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthorizationModels", reflect.TypeOf((*MockOpenFGADatastore)(nil).ReadAuthorizationModels), ctx, store, options)
}

// ReadChanges mocks base method.
func (m *MockOpenFGADatastore) ReadChanges(ctx context.Context, store, objectType string, paginationOptions storage.PaginationOptions, horizonOffset time.Duration) ([]*openfgav1.TupleChange, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadChanges", ctx, store, objectType, paginationOptions, horizonOffset)
	ret0, _ := ret[0].([]*openfgav1.TupleChange)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadChanges indicates an expected call of ReadChanges.
func (mr *MockOpenFGADatastoreMockRecorder) ReadChanges(ctx, store, objectType, paginationOptions, horizonOffset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadChanges", reflect.TypeOf((*MockOpenFGADatastore)(nil).ReadChanges), ctx, store, objectType, paginationOptions, horizonOffset)
}

// ReadPage mocks base method.
func (m *MockOpenFGADatastore) ReadPage(ctx context.Context, store string, tk *openfgav1.TupleKey, opts storage.PaginationOptions) ([]*openfgav1.Tuple, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPage", ctx, store, tk, opts)
	ret0, _ := ret[0].([]*openfgav1.Tuple)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadPage indicates an expected call of ReadPage.
func (mr *MockOpenFGADatastoreMockRecorder) ReadPage(ctx, store, tk, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPage", reflect.TypeOf((*MockOpenFGADatastore)(nil).ReadPage), ctx, store, tk, opts)
}

// ReadStartingWithUser mocks base method.
func (m *MockOpenFGADatastore) ReadStartingWithUser(ctx context.Context, store string, filter storage.ReadStartingWithUserFilter) (storage.TupleIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStartingWithUser", ctx, store, filter)
	ret0, _ := ret[0].(storage.TupleIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStartingWithUser indicates an expected call of ReadStartingWithUser.
func (mr *MockOpenFGADatastoreMockRecorder) ReadStartingWithUser(ctx, store, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStartingWithUser", reflect.TypeOf((*MockOpenFGADatastore)(nil).ReadStartingWithUser), ctx, store, filter)
}

// ReadTypeDefinition mocks base method.
func (m *MockOpenFGADatastore) ReadTypeDefinition(ctx context.Context, store, id, objectType string) (*openfgav1.TypeDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTypeDefinition", ctx, store, id, objectType)
	ret0, _ := ret[0].(*openfgav1.TypeDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTypeDefinition indicates an expected call of ReadTypeDefinition.
func (mr *MockOpenFGADatastoreMockRecorder) ReadTypeDefinition(ctx, store, id, objectType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTypeDefinition", reflect.TypeOf((*MockOpenFGADatastore)(nil).ReadTypeDefinition), ctx, store, id, objectType)
}

// ReadUserTuple mocks base method.
func (m *MockOpenFGADatastore) ReadUserTuple(ctx context.Context, store string, tk *openfgav1.TupleKey) (*openfgav1.Tuple, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserTuple", ctx, store, tk)
	ret0, _ := ret[0].(*openfgav1.Tuple)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserTuple indicates an expected call of ReadUserTuple.
func (mr *MockOpenFGADatastoreMockRecorder) ReadUserTuple(ctx, store, tk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserTuple", reflect.TypeOf((*MockOpenFGADatastore)(nil).ReadUserTuple), ctx, store, tk)
}

// ReadUsersetTuples mocks base method.
func (m *MockOpenFGADatastore) ReadUsersetTuples(ctx context.Context, store string, filter storage.ReadUsersetTuplesFilter) (storage.TupleIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUsersetTuples", ctx, store, filter)
	ret0, _ := ret[0].(storage.TupleIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUsersetTuples indicates an expected call of ReadUsersetTuples.
func (mr *MockOpenFGADatastoreMockRecorder) ReadUsersetTuples(ctx, store, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUsersetTuples", reflect.TypeOf((*MockOpenFGADatastore)(nil).ReadUsersetTuples), ctx, store, filter)
}

// Write mocks base method.
func (m *MockOpenFGADatastore) Write(ctx context.Context, store string, d storage.Deletes, w storage.Writes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, store, d, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockOpenFGADatastoreMockRecorder) Write(ctx, store, d, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockOpenFGADatastore)(nil).Write), ctx, store, d, w)
}

// WriteAssertions mocks base method.
func (m *MockOpenFGADatastore) WriteAssertions(ctx context.Context, store, modelID string, assertions []*openfgav1.Assertion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAssertions", ctx, store, modelID, assertions)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAssertions indicates an expected call of WriteAssertions.
func (mr *MockOpenFGADatastoreMockRecorder) WriteAssertions(ctx, store, modelID, assertions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAssertions", reflect.TypeOf((*MockOpenFGADatastore)(nil).WriteAssertions), ctx, store, modelID, assertions)
}

// WriteAuthorizationModel mocks base method.
func (m *MockOpenFGADatastore) WriteAuthorizationModel(ctx context.Context, store string, model *openfgav1.AuthorizationModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAuthorizationModel", ctx, store, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAuthorizationModel indicates an expected call of WriteAuthorizationModel.
func (mr *MockOpenFGADatastoreMockRecorder) WriteAuthorizationModel(ctx, store, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAuthorizationModel", reflect.TypeOf((*MockOpenFGADatastore)(nil).WriteAuthorizationModel), ctx, store, model)
}
