services:
  postgres:
    image: postgres:14
    container_name: postgres
    command: postgres -c 'max_connections=100'
    networks:
      - default
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    depends_on:
      postgres:
        condition: service_healthy
    image: openfga/openfga:latest
    container_name: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable
    command: migrate
    networks:
      - default

  openfga:
    depends_on:
      migrate:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    image: openfga/openfga:latest
    container_name: openfga
    command: run
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable
      - OPENFGA_DATASTORE_MAX_OPEN_CONNS=100 #see postgres container
      - OPENFGA_TRACE_ENABLED=true
      - OPENFGA_TRACE_SAMPLE_RATIO=1
      - OPENFGA_TRACE_OTLP_ENDPOINT=otel-collector:4317
      - OPENFGA_METRICS_ENABLE_RPC_HISTOGRAMS=true
    networks:
      - default
    ports:
      - "8080:8080" #http
      - "8081:8081" #grpc
      - "3000:3000" #playground
      - "2112:2112" #prometheus metrics
    healthcheck:
      test: ["CMD", "/usr/local/bin/grpc_health_probe", "-addr=openfga:8081"]
      interval: 5s
      timeout: 30s
      retries: 3

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - "./telemetry/otel-collector-config.yaml:/etc/otel-collector-config.yaml"
    networks:
      - default
    ports:
      - "4317:4317" #grpc OTLP receiver
      - "2113:2113" #prometheus metrics exporter

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    command: ["--query.max-clock-skew-adjustment", "500ms"]
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaegar_data:/badger
    ports:
      - "16686:16686" # UI
      - "4317" # OTLP gRPC default port
    depends_on:
      - otel-collector
    networks:
      - default

  prometheus:
    image: prom/prometheus:v2.30.3
    ports:
      - 9090:9090 # UI
    depends_on:
      - otel-collector
    volumes:
      - ./telemetry/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
      image: grafana/grafana
      ports:
        - 3001:3000 # UI
      restart: unless-stopped
      depends_on:
        prometheus:
          condition: service_started
      volumes:
        - ./telemetry/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
        - ./telemetry/grafana/provisioning/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/main.yaml
        - ./telemetry/grafana/dashboards:/etc/grafana/dashboards
        - grafana_data:/var/lib/grafana
volumes:
  prometheus_data:
  grafana_data:
  jaegar_data:
