{
    "properties": {
        "maxTuplesPerWrite": {
            "description": "The maximum allowed number of tuples per Write transaction.",
            "type": "integer",
            "default": 100
        },
        "maxTypesPerAuthorizationModel": {
            "description": "The maximum allowed number of type definitions per authorization model.",
            "type": "integer",
            "default": 100
        },
        "changelogHorizonOffset": {
            "description": "The offset (in minutes) from the current time. Changes that occur after this offset will not be included in the response of ReadChanges.",
            "type": "integer",
            "default": 0
        },
        "resolveNodeLimit": {
            "description": "Defines how deeply nested an authorization model can be.",
            "type": "integer",
            "default": 25
        },
        "listObjectsDeadline": {
            "description": "The timeout deadline for serving ListObjects requests",
            "type": "string",
            "format": "duration",
            "default": "3s"
        },
        "listObjectsMaxResults": {
            "description": "The maximum results to return in ListObjects responses",
            "type": "integer",
            "minimum": 0,
            "default": 1000
        },
        "playground": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Enable/disable the OpenFGA Playground.",
                    "type": "boolean",
                    "default": true
                },
                "port": {
                    "description": "The port to serve the local OpenFGA Playground on.",
                    "type": "integer",
                    "default": 3000
                }
            }
        },
        "profiler": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Enabled/disable pprof profiling.",
                    "type": "boolean",
                    "default": false
                },
                "addr": {
                    "description": "The host:port address to serve the pprof profiler server on.",
                    "type": "string",
                    "default": ":3001"
                }
            }
        },
        "datastore": {
            "type": "object",
            "properties": {
                "engine": {
                    "description": "The datastore engine that will be used for persistence.",
                    "type": "string",
                    "enum": ["memory", "postgres"],
                    "default": "memory"
                },
                "uri": {
                    "description": "The connection uri to use to connect to the datastore (for any engine other than 'memory').",
                    "type": "string",
                    "examples": [
                        "postgres://user:pass@host:port/datastore?opts"
                    ]
                },
                "maxCacheSize": {
                    "description": "The maximum number of cache keys that the storage cache can store before evicting old keys.",
                    "type": "integer",
                    "default": 100000
                }
            }
        },
        "authn": {
            "type": "object",
            "properties": {
                "method": {
                    "description": "The authentication method to use.",
                    "type": "string",
                    "enum": ["none", "preshared", "oidc"],
                    "default": "none"
                },
                "preshared": {
                    "description": "One or more preshared keys to use for authentication. This must be set if `authn.method=preshared'.",
                    "$ref": "#/definitions/preshared"
                },
                "oidc": {
                    "description": "The OIDC provider specific settings. This must be set if 'authn.method=oidc'.",
                    "$ref": "#/definitions/oidc"
                }

            }
        },
        "grpc": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Enables or disables the OpenFGA grpc server. If 'http.enabled' is set to true, then this must be set to true.",
                    "type": "boolean",
                    "default": true
                },
                "addr": {
                    "description": "The host:port address to serve the grpc server on.",
                    "type": "string",
                    "default": "0.0.0.0:8081"
                },
                "tls": {
                    "$ref": "#/definitions/tls"
                }
            }
        },
        "http": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Enables or disables the OpenFGA HTTP server. If this is set to true then 'grpc.enabled' must be set to true.",
                    "type": "boolean",
                    "default": true
                },
                "addr": {
                    "description": "The host:port address to serve the HTTP server on.",
                    "type": "string",
                    "default": "0.0.0.0:8080"
                },
                "tls": {
                    "$ref": "#/definitions/tls"
                },
                "upstreamTimeout": {
                    "description": "The timeout duration for proxying HTTP requests upstream to the grpc endpoint.",
                    "type": "string",
                    "default": "3s"
                },
                "corsAllowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": ["*"]
                },
                "corsAllowedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": ["*"]
                }
            }
        },
        "log": {
            "type": "object",
            "properties": {
                "format": {
                    "description": "The log format to output logs in. For production we recommend 'json' format.",
                    "type": "string",
                    "enum": ["text", "json"],
                    "default": "text"
                }
            }
        }
    },
    "definitions": {
        "tls": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Enables or disables transport layer security (TLS).",
                    "type": "boolean",
                    "default": false
                },
                "cert": {
                    "description": "The (absolute) file path of the certificate to use for the TLS connection.",
                    "type": "string"
                },
                "key": {
                    "description": "The (absolute) file path of the TLS key that should be used for the TLS connection."
                }
            },
            "required": ["enabled", "cert", "key"]
        },
        "oidc": {
            "type": "object",
            "properties": {
                "issuer": {
                    "description": "The OIDC issuer (authorization server) signing the tokens.",
                    "type": "string"
                },
                "audience": {
                    "description": "The OIDC audience of the tokens being signed by the authorization server.",
                    "type": "string"
                }
            },
            "required": ["issuer", "audience"]
        },
        "preshared": {
            "type": "object",
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1
                }
            },
            "required": ["keys"]
        }
    }
}