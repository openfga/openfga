// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/postgres/pgxpool_iter_query.go
//
// Generated by this command:
//
//	mockgen -source=pkg/storage/postgres/pgxpool_iter_query.go --destination internal/mocks/mock_pgx_tx.go --package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MockpgxQuery is a mock of pgxQuery interface.
type MockpgxQuery struct {
	ctrl     *gomock.Controller
	recorder *MockpgxQueryMockRecorder
	isgomock struct{}
}

// MockpgxQueryMockRecorder is the mock recorder for MockpgxQuery.
type MockpgxQueryMockRecorder struct {
	mock *MockpgxQuery
}

// NewMockpgxQuery creates a new mock instance.
func NewMockpgxQuery(ctrl *gomock.Controller) *MockpgxQuery {
	mock := &MockpgxQuery{ctrl: ctrl}
	mock.recorder = &MockpgxQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpgxQuery) EXPECT() *MockpgxQueryMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockpgxQuery) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockpgxQueryMockRecorder) Query(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockpgxQuery)(nil).Query), varargs...)
}

// MockpgxExec is a mock of pgxExec interface.
type MockpgxExec struct {
	ctrl     *gomock.Controller
	recorder *MockpgxExecMockRecorder
	isgomock struct{}
}

// MockpgxExecMockRecorder is the mock recorder for MockpgxExec.
type MockpgxExecMockRecorder struct {
	mock *MockpgxExec
}

// NewMockpgxExec creates a new mock instance.
func NewMockpgxExec(ctrl *gomock.Controller) *MockpgxExec {
	mock := &MockpgxExec{ctrl: ctrl}
	mock.recorder = &MockpgxExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpgxExec) EXPECT() *MockpgxExecMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockpgxExec) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockpgxExecMockRecorder) Exec(ctx, sql any, arguments ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockpgxExec)(nil).Exec), varargs...)
}
