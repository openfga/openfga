// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cachecontroller/cache_controller.go
//
// Generated by this command:
//
//	mockgen -source internal/cachecontroller/cache_controller.go -destination internal/mocks/mock_cachecontroller.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheController is a mock of CacheController interface.
type MockCacheController struct {
	ctrl     *gomock.Controller
	recorder *MockCacheControllerMockRecorder
}

// MockCacheControllerMockRecorder is the mock recorder for MockCacheController.
type MockCacheControllerMockRecorder struct {
	mock *MockCacheController
}

// NewMockCacheController creates a new mock instance.
func NewMockCacheController(ctrl *gomock.Controller) *MockCacheController {
	mock := &MockCacheController{ctrl: ctrl}
	mock.recorder = &MockCacheControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheController) EXPECT() *MockCacheControllerMockRecorder {
	return m.recorder
}

// DetermineInvalidation mocks base method.
func (m *MockCacheController) DetermineInvalidation(ctx context.Context, storeID string) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetermineInvalidation", ctx, storeID)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// DetermineInvalidation indicates an expected call of DetermineInvalidation.
func (mr *MockCacheControllerMockRecorder) DetermineInvalidation(ctx, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineInvalidation", reflect.TypeOf((*MockCacheController)(nil).DetermineInvalidation), ctx, storeID)
}
