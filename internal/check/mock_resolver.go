// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openfga/openfga/internal/check (interfaces: CheckResolver)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=internal/mocks/mock_resolver.go github.com/openfga/openfga/internal/check CheckResolver
//

// Package mocks is a generated GoMock package.
package check

import (
	context "context"
	reflect "reflect"
	sync "sync"

	graph "github.com/openfga/language/pkg/go/graph"
	gomock "go.uber.org/mock/gomock"
)

// MockCheckResolver is a mock of CheckResolver interface.
type MockCheckResolver struct {
	ctrl     *gomock.Controller
	recorder *MockCheckResolverMockRecorder
	isgomock struct{}
}

// MockCheckResolverMockRecorder is the mock recorder for MockCheckResolver.
type MockCheckResolverMockRecorder struct {
	mock *MockCheckResolver
}

// NewMockCheckResolver creates a new mock instance.
func NewMockCheckResolver(ctrl *gomock.Controller) *MockCheckResolver {
	mock := &MockCheckResolver{ctrl: ctrl}
	mock.recorder = &MockCheckResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckResolver) EXPECT() *MockCheckResolverMockRecorder {
	return m.recorder
}

// GetModel mocks base method.
func (m *MockCheckResolver) GetModel() *AuthorizationModelGraph {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel")
	ret0, _ := ret[0].(*AuthorizationModelGraph)
	return ret0
}

// GetModel indicates an expected call of GetModel.
func (mr *MockCheckResolverMockRecorder) GetModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockCheckResolver)(nil).GetModel))
}

// ResolveCheck mocks base method.
func (m *MockCheckResolver) ResolveCheck(ctx context.Context, req *Request) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCheck", ctx, req)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveCheck indicates an expected call of ResolveCheck.
func (mr *MockCheckResolverMockRecorder) ResolveCheck(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCheck", reflect.TypeOf((*MockCheckResolver)(nil).ResolveCheck), ctx, req)
}

// ResolveUnion mocks base method.
func (m *MockCheckResolver) ResolveUnion(ctx context.Context, req *Request, node *graph.WeightedAuthorizationModelNode, visited *sync.Map) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveUnion", ctx, req, node, visited)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveUnion indicates an expected call of ResolveUnion.
func (mr *MockCheckResolverMockRecorder) ResolveUnion(ctx, req, node, visited any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveUnion", reflect.TypeOf((*MockCheckResolver)(nil).ResolveUnion), ctx, req, node, visited)
}
